type Any
type Number
type Int extends Number
type Nat extends Int
type DeviceId 
type DeviceType
type PhysioParameterType
type Unit
type String
type Boolean

component Range {
  const min : Number
  const max : Number

  inv (min <= max)
}

component IntRange extends Range {
  const min : Int
  const max : Int
}

component ICEDevice {
  const id          : DeviceId  // UUID/GUID
  const 'type       : DeviceType // 11073 Nomenclature
  
  model             : DeviceModel
  
  pysioParams       : Set[ICEPhysioParameter]
  
  // alarms on two or more physio params
  
  // ... etc
}

component ICEPhysioParameter {
  const ppType : PhysioParameterType // Nomenclature
  const unit            : Unit  // Nomenclature
  
  // add primitive report incl. measurement type
  
  range                 : Range
  
  exchanges             : Set[DataExchange]
  // inv {C}, {P}, {C, P}
  
  alarms                : Set[ICEAlarm] 
}

component DeviceModel { // manufacture model
  const no : String 
  val version : String
  
  securityParams : Set[ICESecurity] // credentials
}

component DataExchange {} // QUIC

component ProviderInitiated extends DataExchange {}

component ClientInitiated extends DataExchange {
  const maxRetrievalRatePerSecond : Nat 
}

component Periodic extends ProviderInitiated {
  // rate info
}

component Episodic extends ProviderInitiated {
  // 
}

component ICEAlarm {
  
}

component RangeValueAlarm extends ICEAlarm with RangeSetting {
}

component TargetValueAlarm extends ICEAlarm with ValueSetting {
  
}

component ValueChangeAlarm extends ICEAlarm {
  
}

component ComplexAlarm extends ICEAlarm {
  const cond : Boolean
}

component ICEDeviceSetting {
  security : Option[ICESecurity]
}

component RangeSetting extends ICEDeviceSetting {
  var min : Number
  var max : Number
  
  inv (min <= max)
}

component IntRangeSetting extends RangeSetting {
  var min : Int
  var max : Int
  
  inv (min <= max)
}

component ValueSetting extends ICEDeviceSetting {
  var value : Any
}

component ICEDeviceStatus {
  security : Option[ICESecurity]
  
  alarms : Set[ICEAlarm]
}

component BatteryLevelStatus extends ICEDeviceStatus {
  val level : Int
  
  inv ((Int'(0) <= level) && (level <= Int'(100)))
}

component ICESecurity {
  // read/write acl
}