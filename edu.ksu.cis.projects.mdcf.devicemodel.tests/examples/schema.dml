type Any
type Number
type Time
type Int extends Number
type Nat extends Int
type DeviceId 
type DeviceType
type PhysioParameterType
type Unit
type String
type Boolean

type MeasurementStatus

component Range {
  const min : Number
  const max : Number

  inv (min <= max)
}

component IntRange extends Range {
  const min : Int
  const max : Int
}


component ICEDevice {
  const id          : DeviceId  // UUID/GUID
  const 'type       : DeviceType // 11073 Nomenclature
  
  model             : DeviceModel
  
  pysioParams       : Set[ICEPhysioParameter]
  
  // alerts on two or more physio params
  
  // ... etc
}

component ICEPhysioParameter {
  const ppType : PhysioParameterType // Nomenclature
  const unit            : Unit  // Nomenclature
  
  // add primitive report incl. measurement type
  
  range                 : Range
  
  parmValueStructure    : Metric //attribute that expresses the structure of the value of this parameter. (numeric, rt-sa, and etc.)
  								 //it can also express context information. (e.g. time stamp) 
  
  exchanges             : Set[DataExchange]
  // inv {C}, {P}, {C, P}
  
  alerts                : Set[ICEAlert] 
}

component DeviceModel { // manufacture model
  const no : String 
  val version : String
  
  securityParams : Set[ICESecurity] // credentials
}

component DataExchange {} // QUIC

component ProviderInitiated extends DataExchange {}

component ClientInitiated extends DataExchange {
  const maxRetrievalRatePerSecond : Nat 
}

component Periodic extends ProviderInitiated {
  // rate info
}

component Episodic extends ProviderInitiated {
  // 
}

component ICEAlert {
  
}

component RangeValueAlert extends ICEAlert with RangeSetting {
}

component TargetValueAlert extends ICEAlert with ValueSetting {
  
}

component ValueChangeAlert extends ICEAlert {
  
}

component ComplexAlert extends ICEAlert {
  const cond : Boolean
}

component ICEDeviceSetting {
  security : Option[ICESecurity]
}

component RangeSetting extends ICEDeviceSetting {
  var min : Number
  var max : Number
  
  inv (min <= max)
}

component IntRangeSetting extends RangeSetting {
  var min : Int
  var max : Int
  
  inv (min <= max)
}

component ValueSetting extends ICEDeviceSetting {
  var value : Any
}

component ICEDeviceStatus {
  security : Option[ICESecurity]
  
  alerts : Set[ICEAlert]
}

component BatteryLevelStatus extends ICEDeviceStatus {
  val level : Int
  
  inv ((Int'(0) <= level) && (level <= Int'(100)))
}

component ICESecurity {
  // read/write acl
}

component Metric {
}

component MetricAttribute {
	
}

component MetricTimeStampAttributes extends MetricAttribute{
	val sec       : Int
	val min       : Int
	val hour      : Int
	val mday      : Int
	val mon       : Int
	val year      : Int
	val wday      : Int
	val yday      : Int
	val isdst     : Int
}

component StatusAttributes extends MetricAttribute{
	val status    : MeasurementStatus //wanted to express an enum but not sure how to do it
}

component SingleValueNumeric extends Metric {
  val value       : Number
  attributes      : Set[MetricAttribute] //I wonder whether this can also mean no attributes
}

component ArrayValueNumeric extends Metric {
  val values      : Seq[Number]
  attributes      : Set[MetricAttribute]
}

