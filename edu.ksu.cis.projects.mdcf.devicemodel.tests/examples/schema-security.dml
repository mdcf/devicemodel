// Notes for Robby:
// It seems like we might want to declare each attribute as either const, val, or var
// Any information that should be the same for all devices of a certain class should get specified as
// a class const
//
// Notes for Eugene:
// DATA is exchanged over the network at runtime
// FEATURES are metadata available for matching
// DATA should never have const
// DATA is in IDL, becomes types in "app language"
// 
// instance is one of the consts: instance => const for specific device
// const instance fixed for a specific device, known at association time -- DEVICE MODEL
// 
// nullable and non-nullable, etc.
// 
// optional or not, etc.
// 
// look at 11073 to justify differentiation -- attributes have multiple categories
//															static, dynamic, observed
//																			    ^^^
//																			   DATA
//const inst: UUID
//const product: model
//const class: type of "thing"			//meta?
//
// FIXME: What can actually be sent -- what's a message, what's a "session"?

//=======================================================================================================
//  B a s e    T y p e s 
//=======================================================================================================

Schema

type Any
type Number
type Time
type VectorTime
type Int extends Number
type Nat extends Int
type UUID
type IEEEDeviceType
type IEEEPhysioParameterType
type IEEEUnit
type String
type Boolean
type MeasurementStatus
type X509Certificate

//=======================================================================================================
//  C o m p o u n d    T y p e s 
//=======================================================================================================


feature Range {
  const min : Number
  const max : Number

  inv (min <= max)
}

feature IntRange extends Range {
  const min : Int
  const max : Int
}

feature NatRange extends Range {
  const min : Nat
  const max : Nat
}

//=======================================================================================================
//  I C E   P r i m a r y     S c h e m a s 
//=======================================================================================================

// === I C E   S e c u r i t y  ===

//TODO: What are the messages which may be sent, i.e.
//where are all the places ICEMEssageContext needs to go?
//
//TODO: In which feature do we stick read-write? PhysioParameter? What about alteration of access control per PhysioParameter?
//Atomic/transactional operations -- locking and read-only things?
//Perhaps leave out permission change for now?

feature ICECertificate {
  const 'type                : Type       // Device, doctor, nurse, app, etc.
  const instance issuer      : String     // E.g. FDA
  const instance name        : String     // Like "common name"/domain name in SSL
  //duplicated within ICEIdentity as humanReadableId
  const instance certificate : X509Certificate
  //more data goes here
  //Including, but not limited to:
  // - Purpose/type (e.g. manufacturer, device model, etc.)
  // - Start and end dates
  // - Public key (or hash)
  // - Private key hash
  // - Intended use ???
}

feature ICECredentials {
  const rootCertificate   : Option[ICECertificate] //Trust root

  inv ((rootCertificate == null) || (rootCertificate.type == "ROOT" && rootCertificate.issuer == "FDA"))
}

feature ICECertifierCredentials extends ICECredentials { //3rd party certifier
  const instance certifierCred   : ICECertificate

  inv (certifierCred.type == "CERTIFIER" && certifierCred.issuer == "FDA")
}

feature ICEAllianceCredentials extends ICECredentials { //This is a strawman example
  const instance allianceCred   : ICECertificate

  inv (allianceCred.type == "ICEALLIANCE" && certifierCred.issuer == "ICEALLIANCE")
}

feature ICEManufacturerCredentials extends ICECredentials {
  const instance manufacturerCred   : ICECertificate

  inv (manufacturerCred.type == "MANUFACTURER" && manufacturerCred.issuer == "FDA")
}

feature ICEDeviceModelCredentials extends ICECredentials {
  const instance deviceModelCertFDA          : ICECertificate //Device model certificate signed by FDA
  const instance deviceModelCertManufacturer : ICECertificate //Device model certificate signed by manufacturer
  const manufacturerCert                     : Either[UUID, ICEManufacturerCredentials]
  
  //FIXME: Certifier should be an option (instead of FDA), but invariants become 
  //too complex to get into right now
  inv (deviceModelCertFDA.type == "DEVICEMODEL" && deviceModelCertFDA.issuer == "FDA")
  inv (deviceModelCertManufacturer.type == "MANUFACTURER" && deviceModelCertManufacturer.issuer == "FDA")
  inv (deviceModelCertManufacturer.name == manufacturerCert.name) //FIXME: can't handle reference (UUID)
}

feature ICEAppModelCredentials extends ICECredentials {
  const instance appModelCertFDA          : ICECertificate //App model certificate signed by FDA
  const instance appModelCertManufacturer : ICECertificate //App model certificate signed by manufacturer
  const manufacturerCert                  : Either[UUID, ICEManufacturerCredentials]

  //FIXME: Certifier should be an option (instead of FDA), but invariants become 
  //too complex to get into right now
  inv (appModelCertFDA.type == "APPMODEL" && appModelCertFDA.issuer == "FDA")
  inv (deviceModelCertManufacturer.type == "MANUFACTURER" && deviceModelCertManufacturer.issuer == "FDA")
  inv (appModelCertManufacturer.name == manufacturerCert.name) //FIXME: can't handle reference (UUID)
}

feature ICEDeviceCredentials extends ICECredentials {
  const instance deviceInstanceCert : ICECertificate //Device physical instance certificate signed by manufacturer
  const instance manufacturerCert   : Either[UUID, ICEManufacturerCertificate] //Manufacturer's certification
  const instance deviceModelCert    : Either[UUID, ICEDeviceModelCredentials]

  inv (deviceModelCert.model == deviceInstanceCert.model) //FIXME: can't handle reference (UUID)
  inv (manufacturerCert.manufacturer == deviceInstanceCert.manufacturer == deviceInstanceCert.issuer) //FIXME: can't handle reference (UUID)
  inv (deviceModelCert.type == "DEVICEMODEL" && (deviceInstanceCert.manufacturer)) //same manufacturer //FIXME: can't handle reference (UUID)
}

feature ICEAppCredentials extends ICECredentials {
  const instance appInstanceCert    : ICECertificate //App instance certificate signed by manufacturer
  const instance manufacturerCert   : Either[UUID, ICEManufacturerCertificate] //Manufacturer's certification
  const instance appModelCert       : Either[UUID, ICEAppModelCredentials]

  inv (deviceModelCert.model == deviceInstanceCert.model) //FIXME: can't handle reference (UUID)
  inv (manufacturerCert.manufacturer == appInstanceCert.manufacturer == appInstanceCert.issuer) //FIXME: can't handle reference (UUID)
  inv (appModelCert.type == "APPMODEL" && (appInstanceCert.manufacturer)) //same manufacturer //FIXME: can't handle reference (UUID)
}


// === I C E   I d e n t i t i e s (entities/principals/components)  ===

//App, device, Network Controller, Supervisor, etc.
//Anything that's pluggable should inherit from this
feature ICEIdentity {
  //Who are you (claim)?
  const instance id               : UUID
  const 'type                     : Type       // Device, doctor, nurse, app, etc.
  const humanReadableId           : String     // Something a person can understand -- 
								               // SHOULD be overridden at runtime by
                                               // network controller parsing the device metadata
  //Proof (of above claim)
  const credentials               : ICECredentials
}

feature ICEManufacturerIdentity extends ICEIdentity {
  override const humanReadableId  : ManufacturerName
  override 'type                  : "Manufacturer"

  override const credentials      : ICEManufacturerCredentials

  //TODO: Do we need a verifier outside the language type checker?
  inv (credentials.manufacturer == ManufacturerName) //what's the type used in ICEIdentity?
}

feature ICEDeviceIdentity extends ICEIdentity {
  override 'type                  : DeviceType       // 11073 Nomenclature
  Const Product manufacturer	  : ICEManufacturerIdentity
  // instance constant, indicates the manufacturer model number of the device
  const product modelNumber       : String 

  // read-only setting on the device. This might also be specified as an instance constant,
  // but Eugene argued that we may change the software version without change the device model.
  // In such a situation, the value should not be constant.
  val versionNumber               : String

  override const credentials      : ICEDeviceCredentials

  // security credentials inherited from ICEIdentity
}

feature ICEAppIdentity extends ICEIdentity {
  override 'type                  : AppType          // Nomenclature -- probably NOT 11073
  Const Product manufacturer	  : ICEManufacturerIdentity
  const product modelNumber       : String           // Probably doesn't apply to software 

  val versionNumber               : String

  override const credentials      : ICEAppCredentials

  // security credentials inherited from ICEIdentity
}

feature ICEClinicianIdentity extends ICEIdentity {
  override 'type          : "Clinician"
  // roles are out of scope for now:
  roles                   : Set[ClinicianRole]       //1..*, otherwise meaningless
  const affiliation       : Set[ICEFacilityIdentity] //0..*

  // security credentials inherited from ICEIdentity but MUCH more complex

  override const credentials      : ICEClinicianCredentials

  inv (ICECredentials.name is in affiliation)
}


// === I C E   D e v i c e  ===

feature ICEDevice extends ICEDeviceIdentity {   //let apps and devices be more similar
  /* // inherited from ICEDeviceIdentity:
  const instance id          : DeviceId  // UUID/GUID
  const class 'type          : IEEEDeviceType // 11073 Nomenclature
  
  // information about the manfacturer make / model of the device
  Const Product manufacturerModel : ICEManufacturerModel
  */

  // physiological parameters provided for the device
  // cardinality constraint: set may be empty
  physioParams         : Set[ICEPhysioParameter]

 //Eugene: future-proofing, e.g. must bind to at least these parameters, otherwise 
 //device not being used as intended. Of course app can be actively stupid and throw 
 //some of the data away even though it receives it, but there's only so much we can 
 //do. This may catch enough stupid errors to be worthwhile.
 //indentedUse         : Set[SomeStuff]

  // device level alarms / alerts
  // cardinality constraint: set may be empty
  alerts             : Set[ICEAlert]

  // security credentials inherited from ICEDeviceIdentity

  // ... etc
}

// === I C E   A p p  ===

feature ICEApp extends ICEAppIdentity {
  // physiological parameters provided or consumed
  // cardinality constraint: set may be empty
  physioParams      : Set[ICEPhysioParameter]

 //Eugene: future-proofing, e.g. must bind to at least these parameters, otherwise 
 //device not being used as intended. Of course app can be actively stupid and throw 
 //some of the data away even though it receives it, but there's only so much we can 
 //do. This may catch enough stupid errors to be worthwhile.
 //indentedUse         : Set[SomeStuff]

  // app level alarms / alerts
  // cardinality constraint: set may be empty
  alerts             : Set[ICEAlert]

  // ... etc
}

// === I C E   M a n u f a c t u r e r    I n f o r m a t i o n === //Eugene: moved into identities

/*
feature ICEManufacturerModel { 
  // instance constant, indicates the manufacturer model number of the device
  const product modelNumber : String 
  // read-only setting on the device.  This might also be specified as an instance constant, but Eugene
  // argued that we may change the software version without change the device model.  In such a situation,
  // the value should not be constant.
  val versionNumber : String
  // security credentials used to authenticate the device when it associates to the ICE.
  //credentials : Set[ICESecurity] // credentials
}
*/

// === I C E   P h y s i o l o g i c a l    P a r a m e t e r  ===

feature ICEPhysioParameter {
  const instance context          : ICEMessageContext
  // class constant
  const class physioParameterType : IEEEPhysioParameterType // Nomenclature
  // class constant
  const class unit                : IEEEUnit  // Nomenclature

  Const Product parameterValueStructure    : ICEMetric //attribute that expresses the structure of the value of this parameter. (numeric, rt-sa, and etc.)
  								 //it can also express context information. (e.g. time stamp) 
  // cardinality constraint: set must have a least one element drawn from ClientInitiated or Periodic
  exchanges             : Set[ICEDataExchange]

  // alarms/alerts associated with this physiological parameter
  // cardinality constraint: set may be empty -- alerts are optional.
  alerts                : Set[ICEAlert] 
  
  // Questions:
  //   - where should the ICE settings go that might configure properties of this parameter.  It seems like inside of this structure itself
  //     might be the appropriate place.
  //   - where should the security settings go?  If settings go in this structure, then we might be in a position where we have to specify
  //     security properties for both things we read and things we write.
}

// === I C E    D a t a    E x c h a n g e    P a t t e r n s ===

// Data exchanges specify that patterns of interaction between clients and providers of device model
// when moving a value from the provider to a client (e.g., reading a value provided by a device)
//

feature ICEDataExchange {} // roughly corresponds to QUIC transactions

feature ProviderInitiated extends ICEDataExchange {}

feature ClientInitiated extends ICEDataExchange {
  // instance const, most likely, but might be a class constant.
  // Specifies the maximum rate (in terms of requests per second) at which client can request a value from a device 
  const class maxRetrievalRate : Nat 
}

feature Periodic extends ProviderInitiated {
  // The provider will publish at a rate between the upper/lower bounds of IntRange per Rate_Unit
  // Note: This structure matches AADL's Communication_Properties::Output_Rate (and Input_Rate)
  // For simplicity, for earlier versions of this work, we might want to assume Rate_Unit is standardized to
  // PerSecond and Rate_Distribution to Fixed.
  Const Product rateRange : NatRange  //
  // instance const, most likely, but might be a class constant
  // Rate_Unit => PerSecond
  // instance const, most likely, but might be a class constant
  // Rate_Distribution => Fixed
}

feature Episodic extends ProviderInitiated {
  // Specifies the maximum rate (in terms of requests per second) at which the provider may publish a value
  const product maxPublishRate : Nat 
}

//=======================================================================================================
//  I C E   M e t r i c    H i e r a r c h y    (adapted from 11073)
//=======================================================================================================

// === I C E   D a t a    E x c h a n g e    M e t a d a t a  ===

feature ICEMessageContext {
  val messageConstructed      : ICETime
  const instance session      : Nat                 //Session ID
  const instance seqNum       : Nat				    //Sequence of message within session
  const instance auth         : ICEMessageSignature //Signature authenticating the message
  //FIXME: per message permissions?
  //	current permission
  //	maximal permission
  //CompCert memory model
} 
//FIXME: confidentiality is post-processing... HOW?

// From 11073 DIM documentation
// The Metric object is the base class for all objects representing direct and derived, quantitative and 
// qualitative biosignal measurement, status, and context data.
// Specializations of the Metric object are provided to deal with common representations 
// (e.g., single values, array data, status indications) and presentations (e.g., on a display) of measurement data.
// As a base class, the Metric object cannot be instantiated.

feature ICEMetric {
  const instance context          : ICEMessageContext
}

// Not sure we need the extra level of indirection provided by this declaration -- JMH
data MetricAttribute {
}

// Eugene: this should probably be folded into ICETime
// I think this is probably way too heavyweight -- absolute UNIX time may be enough
data MetricTimeStampAttributes extends MetricAttribute{
	val sec       : Int
	val min       : Int
	val hour      : Int
	val mday      : Int
	val mon       : Int
	val year      : Int
	val wday      : Int
	val yday      : Int
	val isdst     : Int
}

//FIXME: 11073 metric fields
data ICETime {
  val localTS    : Option[Time]       //Device local timestamp -- no guarantee it's accurate
  val vectorTS   : Option[VectorTime] //Vector timestamp, if exists
}

feature StatusAttributes extends MetricAttribute{
	val status    : MeasurementStatus //wanted to express an enum but not sure how to do it
}

// --- quote From 11073 DIM ---
// The Numeric object represents numerical measurements and status information, e.g., amplitude measures, counters.
// Example: A heart rate measurement is represented by a Numeric object.
//
// NOTE-A: compound Numeric object is defined as an efficient model, for example, for arterial blood pressure, 
// which usually has three associated values (i.e., systolic, diastolic, mean). The availability of multiple values in a single 
// Numeric (or other Metric) object can be indicated in a special structure attribute in the Metric object.
// --- end quote ---
//
// The last remark above indicates that we need to consider how we will represent compound data.  The above example sounds like
// a record or tuple, but more info is needed.
//

feature Numeric extends ICEMetric {
  // note: you should be able to declare this to be a "val" to indicate this are things to read
  Data observedValue : ObsValue   // Analogous to NuObsValue in 11073 Numeric (see p. 56 of DIM spec)
  // Do we want to allow this high degree of polymorphism on the attributes? 
  // Why not name them directly and avoid the use of the "Set"? -- JMH
  //Eugene: can't we take care of this using ObsValueContext??
  attributes      : Set[MetricAttribute]   // Note: attributes mentioned here would be static (contrast with attributes mentioned in obs val context)
  // place holder for eventual capability for specifying an invariant on the value.
  range           : Range
}

// Analogous to NuObsValue type on p. 57 of DIM spec.   Note that the NuObsValue structure includes other information
// like the nomenclature tags for the physiological parameter and units.  But we don't see a need to report those at
// run-time because that info is already included in the meta-data.
// This feature type expresses the structure of the message reporting on this physiological parameter, and would be 
// expressed using something like CORBA IDL
data ObsValue {
  val value : Any                // The actual represent of number to be reported 
  // add time stamp
 /* val */ context : ObsValueContext  // structure to describe format of other attributes reported at run-time
}

// this would contain time stamp and other information accompanying the parameter
// Is this where information analogous to the 11073 MeasurementStatus record goes? (see p. 55 of DIM spec) 
feature ObsValueContext {
  val whenRecorded : ICETime
}

// --- quote From 11073 DIM ---
// The Sample Array object is the base class for metrics that have a graphical, curve type presentation and, 
// therefore, have their observation values reported as arrays of data points by communicating systems.
// As a base class, the Sample Array object cannot be instantiated.
// --- end quote ---

feature SampleArray extends ICEMetric {
  val values      : Seq[Number]
  attributes      : Set[MetricAttribute]
}

// --- quote From 11073 DIM ---
// The Real Time Sample Array object is a sample array that represents a real-time continuous waveform. 
// As such, it has special requirements in communicating systems, e.g., processing power, low latency, high band- width. 
// Therefore, it requires the definition of a specialized object.
//
// Example: An electrocardiogram (ECG) real-time wave is represented as a Real Time Sample Array object.
// --- end quote ---

feature RealTimeSA extends SampleArray {
  // implementation to be completed		
}

// --- quote From 11073 DIM ---
// The Time Sample Array object is a sample array that represents noncontinuous waveforms (i.e., a wave snip- pet). 
// Within a single observation (i.e., a single array of sample values), samples are equidistant in time.
//
// Example: Software for ST segment analysis may use the Time Sample Array object to represent snippets of 
// ECG real-time waves that contain only a single QRS complex. Within this wave snippet, the software can locate the 
// ST measurement points. It generates a new snippet, for example, every 15 s.
// --- end quote ---

feature TimeSA extends SampleArray {
  val values      : Seq[Number]
  attributes      : Set[MetricAttribute]
  // implementation to be completed	
}

// --- quote From 11073 DIM ---
// The Distribution Sample Array object is a sample array that represents linear value distributions in the form of 
// arrays containing scaled sample values. The index of a value within an observation array denotes a spatial value, 
// not a time point.
//
// Example: An electroencephalogram (EEG) application may use a Fourier transformation to derive a frequency distribution 
// (i.e., a spectrum) from the EEG signal. It then uses the Distribution Sample Array object to represent that spectrum in the MDIB.
// --- end quote ---
feature DistributionSA extends SampleArray {
  // implementation to be completed	
}

//=======================================================================================================
//  I C E   A l e r t     H i e r a r c h y
//
//  Note: An alert structure could be patterned after 11073, but we have not assessed the usefulness of that yet.
//  A very simple alert structure is given below.    
//=======================================================================================================

feature ICEAlert {
  const instance context          : ICEMessageContext
}

feature RangeValueAlert extends ICEAlert with RangeSetting {
}

feature TargetValueAlert extends ICEAlert with ValueSetting {
  
}

feature ValueChangeAlert extends ICEAlert {
  
}

feature ComplexAlert extends ICEAlert {
  const cond : Boolean
}


//=======================================================================================================
//  I C E   D e v i c e    S e t t i n g s
//
//  Defines settings on the provider that may be read or written by the client.
//=======================================================================================================

feature ICEDeviceSetting {
  const instance context          : ICEMessageContext

  //security : Option[ICESecurity]
  //FIXME: need some form of ACL here!
}


feature RangeSetting extends ICEDeviceSetting {
  var min : Number
  var max : Number
  
  inv (min <= max)
}

feature IntRangeSetting extends RangeSetting {
  var min : Int
  var max : Int
  
  inv (min <= max)
}

feature ValueSetting extends ICEDeviceSetting {
  var value : Any
}

//=======================================================================================================
//  I C E   D e v i c e    S t a t u s   
//
//  Defines values on the device that are part of the device's state, and thus may vary during association.
//  Such values may be read or written by the client.
//=======================================================================================================

feature ICEDeviceStatus {
  const instance context          : ICEMessageContext
  alerts : Set[ICEAlert]

  // security inherited from ICEMessageContext
}

// Not sure if this should be defined as a schema.  This seems to me to be an example of a status value that
// would be introduced at the class level.
feature BatteryLevelStatus extends ICEDeviceStatus {
  val level : Int
  
  inv ((Int'(0) <= level) && (level <= Int'(100)))
}

