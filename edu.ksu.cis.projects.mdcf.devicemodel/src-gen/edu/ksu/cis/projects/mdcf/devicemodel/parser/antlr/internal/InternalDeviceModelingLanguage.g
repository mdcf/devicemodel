/*
* generated by Xtext
*/
grammar InternalDeviceModelingLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package edu.ksu.cis.projects.mdcf.devicemodel.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.ksu.cis.projects.mdcf.devicemodel.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.ksu.cis.projects.mdcf.devicemodel.services.DeviceModelingLanguageGrammarAccess;

}

@parser::members {

 	private DeviceModelingLanguageGrammarAccess grammarAccess;
 	
    public InternalDeviceModelingLanguageParser(TokenStream input, DeviceModelingLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected DeviceModelingLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclsDeclParserRuleCall_0()); 
	    }
		lv_decls_0_0=ruleDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"decls",
        		lv_decls_0_0, 
        		"Decl");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleDecl
entryRuleDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclRule()); }
	 iv_ruleDecl=ruleDecl 
	 { $current=$iv_ruleDecl.current; } 
	 EOF 
;

// Rule Decl
ruleDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclAccess().getTypeDeclParserRuleCall_0()); 
    }
    this_TypeDecl_0=ruleTypeDecl
    { 
        $current = $this_TypeDecl_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclAccess().getComponentDeclParserRuleCall_1()); 
    }
    this_ComponentDecl_1=ruleComponentDecl
    { 
        $current = $this_ComponentDecl_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclAccess().getAppRequirementParserRuleCall_2()); 
    }
    this_AppRequirement_2=ruleAppRequirement
    { 
        $current = $this_AppRequirement_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTypeDecl
entryRuleTypeDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclRule()); }
	 iv_ruleTypeDecl=ruleTypeDecl 
	 { $current=$iv_ruleTypeDecl.current; } 
	 EOF 
;

// Rule TypeDecl
ruleTypeDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDeclAccess().getTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeDeclAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleComponentDecl
entryRuleComponentDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentDeclRule()); }
	 iv_ruleComponentDecl=ruleComponentDecl 
	 { $current=$iv_ruleComponentDecl.current; } 
	 EOF 
;

// Rule ComponentDecl
ruleComponentDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	otherlv_0='component' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentDeclAccess().getComponentKeyword_0_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getComponentDeclAccess().getComponentAction_0_0_1(),
            $current);
    }
))
    |(	otherlv_2='instance' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComponentDeclAccess().getInstanceKeyword_0_1_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getComponentDeclAccess().getInstanceAction_0_1_1(),
            $current);
    }
)))(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getComponentDeclAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)(	otherlv_5='extends' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getComponentDeclAccess().getExtendsKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentDeclRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getComponentDeclAccess().getSupersComponentDeclCrossReference_2_1_0()); 
	}

)
)(	otherlv_7='with' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getComponentDeclAccess().getWithKeyword_2_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentDeclRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getComponentDeclAccess().getSupersComponentDeclCrossReference_2_2_1_0()); 
	}

)
))*)?(	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getComponentDeclAccess().getLeftCurlyBracketKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentDeclAccess().getMembersMemberDeclParserRuleCall_3_1_0()); 
	    }
		lv_members_10_0=ruleMemberDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentDeclRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_10_0, 
        		"MemberDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getComponentDeclAccess().getRightCurlyBracketKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleMemberDecl
entryRuleMemberDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberDeclRule()); }
	 iv_ruleMemberDecl=ruleMemberDecl 
	 { $current=$iv_ruleMemberDecl.current; } 
	 EOF 
;

// Rule MemberDecl
ruleMemberDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMemberDeclAccess().getAttrDeclParserRuleCall_0()); 
    }
    this_AttrDecl_0=ruleAttrDecl
    { 
        $current = $this_AttrDecl_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberDeclAccess().getSubMemberDeclParserRuleCall_1()); 
    }
    this_SubMemberDecl_1=ruleSubMemberDecl
    { 
        $current = $this_SubMemberDecl_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberDeclAccess().getInvariantDeclParserRuleCall_2()); 
    }
    this_InvariantDecl_2=ruleInvariantDecl
    { 
        $current = $this_InvariantDecl_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAttrDecl
entryRuleAttrDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrDeclRule()); }
	 iv_ruleAttrDecl=ruleAttrDecl 
	 { $current=$iv_ruleAttrDecl.current; } 
	 EOF 
;

// Rule AttrDecl
ruleAttrDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttrDeclAccess().getModifierModifierParserRuleCall_0_0()); 
	    }
		lv_modifier_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrDeclRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_attributeName_1_0=RULE_ID
		{
			newLeafNode(lv_attributeName_1_0, grammarAccess.getAttrDeclAccess().getAttributeNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttrDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"attributeName",
        		lv_attributeName_1_0, 
        		"ID");
	    }

)
)((	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttrDeclAccess().getColonKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrDeclAccess().getTypeTypeParserRuleCall_2_0_1_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttrDeclAccess().getEqualsSignKeyword_2_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrDeclAccess().getLiteralLiteralParserRuleCall_2_0_2_1_0()); 
	    }
		lv_literal_5_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrDeclRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_5_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAttrDeclAccess().getEqualsSignKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrDeclAccess().getLiteralLiteralParserRuleCall_2_1_1_0()); 
	    }
		lv_literal_7_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrDeclRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_7_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleModifier
entryRuleModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModifierRule()); } 
	 iv_ruleModifier=ruleModifier 
	 { $current=$iv_ruleModifier.current.getText(); }  
	 EOF 
;

// Rule Modifier
ruleModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='const' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getConstKeyword_0()); 
    }

    |
	kw='val' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getValKeyword_1()); 
    }

    |
	kw='var' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getVarKeyword_2()); 
    }

    |
	kw='def' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getDefKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleSubMemberDecl
entryRuleSubMemberDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubMemberDeclRule()); }
	 iv_ruleSubMemberDecl=ruleSubMemberDecl 
	 { $current=$iv_ruleSubMemberDecl.current; } 
	 EOF 
;

// Rule SubMemberDecl
ruleSubMemberDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubMemberDeclAccess().getSubMemberDeclAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSubMemberDeclAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubMemberDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubMemberDeclAccess().getColonKeyword_2_0_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubMemberDeclRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getSubMemberDeclAccess().getSupersComponentDeclCrossReference_2_0_1_0()); 
	}

)
)(	otherlv_4='with' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubMemberDeclAccess().getWithKeyword_2_0_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubMemberDeclRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getSubMemberDeclAccess().getSupersComponentDeclCrossReference_2_0_2_1_0()); 
	}

)
))*(	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSubMemberDeclAccess().getLeftCurlyBracketKeyword_2_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubMemberDeclAccess().getMembersMemberDeclParserRuleCall_2_0_3_1_0()); 
	    }
		lv_members_7_0=ruleMemberDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubMemberDeclRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_7_0, 
        		"MemberDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSubMemberDeclAccess().getRightCurlyBracketKeyword_2_0_3_2());
    }
)?)
    |(	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSubMemberDeclAccess().getLeftCurlyBracketKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubMemberDeclAccess().getMembersMemberDeclParserRuleCall_2_1_1_0()); 
	    }
		lv_members_10_0=ruleMemberDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubMemberDeclRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_10_0, 
        		"MemberDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSubMemberDeclAccess().getRightCurlyBracketKeyword_2_1_2());
    }
)))
;





// Entry rule entryRuleInvariantDecl
entryRuleInvariantDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInvariantDeclRule()); }
	 iv_ruleInvariantDecl=ruleInvariantDecl 
	 { $current=$iv_ruleInvariantDecl.current; } 
	 EOF 
;

// Rule InvariantDecl
ruleInvariantDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getInvariantDeclAccess().getMultiplicityInvariantDeclParserRuleCall()); 
    }
    this_MultiplicityInvariantDecl_0=ruleMultiplicityInvariantDecl
    { 
        $current = $this_MultiplicityInvariantDecl_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleMultiplicityInvariantDecl
entryRuleMultiplicityInvariantDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicityInvariantDeclRule()); }
	 iv_ruleMultiplicityInvariantDecl=ruleMultiplicityInvariantDecl 
	 { $current=$iv_ruleMultiplicityInvariantDecl.current; } 
	 EOF 
;

// Rule MultiplicityInvariantDecl
ruleMultiplicityInvariantDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='inv' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultiplicityInvariantDeclAccess().getInvKeyword_0());
    }
((
(
		lv_invName_1_0=RULE_ID
		{
			newLeafNode(lv_invName_1_0, grammarAccess.getMultiplicityInvariantDeclAccess().getInvNameIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicityInvariantDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"invName",
        		lv_invName_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicityInvariantDeclAccess().getColonKeyword_1_1());
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicityInvariantDeclAccess().getLoConstraintNatParserRuleCall_2_0_0()); 
	    }
		lv_lo_3_0=ruleConstraintNat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicityInvariantDeclRule());
	        }
       		set(
       			$current, 
       			"lo",
        		lv_lo_3_0, 
        		"ConstraintNat");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='..' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultiplicityInvariantDeclAccess().getFullStopFullStopKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicityInvariantDeclAccess().getHiConstraintNatParserRuleCall_2_2_0()); 
	    }
		lv_hi_5_0=ruleConstraintNat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicityInvariantDeclRule());
	        }
       		set(
       			$current, 
       			"hi",
        		lv_hi_5_0, 
        		"ConstraintNat");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicityInvariantDeclAccess().getMatchSubMemberMatchParserRuleCall_3_0()); 
	    }
		lv_match_6_0=ruleSubMemberMatch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicityInvariantDeclRule());
	        }
       		set(
       			$current, 
       			"match",
        		lv_match_6_0, 
        		"SubMemberMatch");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMultiplicityInvariantDeclAccess().getColonKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicityInvariantDeclRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getMultiplicityInvariantDeclAccess().getTypeComponentDeclCrossReference_4_1_0()); 
	}

)
))?)
;





// Entry rule entryRuleSubMemberMatch
entryRuleSubMemberMatch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubMemberMatchRule()); }
	 iv_ruleSubMemberMatch=ruleSubMemberMatch 
	 { $current=$iv_ruleSubMemberMatch.current; } 
	 EOF 
;

// Rule SubMemberMatch
ruleSubMemberMatch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubMemberMatchAccess().getSubMemberMatchAction_0(),
            $current);
    }
)((
(
		lv_qNames_1_0=RULE_ID
		{
			newLeafNode(lv_qNames_1_0, grammarAccess.getSubMemberMatchAccess().getQNamesIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubMemberMatchRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"qNames",
        		lv_qNames_1_0, 
        		"ID");
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubMemberMatchAccess().getFullStopKeyword_1_1());
    }
)*((
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getSubMemberMatchAccess().getNameIDTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubMemberMatchRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)
    |(
(
		lv_any_4_0=	'*' 
    {
        newLeafNode(lv_any_4_0, grammarAccess.getSubMemberMatchAccess().getAnyAsteriskKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubMemberMatchRule());
	        }
       		setWithLastConsumed($current, "any", lv_any_4_0, "*");
	    }

)
)))
;





// Entry rule entryRuleConstraintNat
entryRuleConstraintNat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintNatRule()); }
	 iv_ruleConstraintNat=ruleConstraintNat 
	 { $current=$iv_ruleConstraintNat.current; } 
	 EOF 
;

// Rule ConstraintNat
ruleConstraintNat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstraintNatAccess().getNumNatConstraintAction_0_0(),
            $current);
    }
)(
(
		lv_num_1_0=RULE_NAT
		{
			newLeafNode(lv_num_1_0, grammarAccess.getConstraintNatAccess().getNumNATTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstraintNatRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"num",
        		lv_num_1_0, 
        		"NAT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstraintNatAccess().getAnyNatConstraintAction_1_0(),
            $current);
    }
)	otherlv_3='*' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstraintNatAccess().getAsteriskKeyword_1_1());
    }
))
;







// Entry rule entryRuleAppRequirement
entryRuleAppRequirement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAppRequirementRule()); }
	 iv_ruleAppRequirement=ruleAppRequirement 
	 { $current=$iv_ruleAppRequirement.current; } 
	 EOF 
;

// Rule AppRequirement
ruleAppRequirement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='app' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAppRequirementAccess().getAppKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAppRequirementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAppRequirementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='requires' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAppRequirementAccess().getRequiresKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAppRequirementAccess().getDevicesDeviceParserRuleCall_3_0()); 
	    }
		lv_devices_3_0=ruleDevice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAppRequirementRule());
	        }
       		add(
       			$current, 
       			"devices",
        		lv_devices_3_0, 
        		"Device");
	        afterParserOrEnumRuleCall();
	    }

)
)*((	otherlv_4='extends' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAppRequirementAccess().getExtendsKeyword_4_0_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAppRequirementRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getAppRequirementAccess().getSupersComponentDeclCrossReference_4_0_1_0()); 
	}

)
)(	otherlv_6='with' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAppRequirementAccess().getWithKeyword_4_0_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAppRequirementRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getAppRequirementAccess().getSupersComponentDeclCrossReference_4_0_2_1_0()); 
	}

)
))*(	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAppRequirementAccess().getLeftCurlyBracketKeyword_4_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAppRequirementAccess().getMembersMemberDeclParserRuleCall_4_0_3_1_0()); 
	    }
		lv_members_9_0=ruleMemberDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAppRequirementRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_9_0, 
        		"MemberDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getAppRequirementAccess().getRightCurlyBracketKeyword_4_0_3_2());
    }
)?)
    |(	otherlv_11='{' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAppRequirementAccess().getLeftCurlyBracketKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAppRequirementAccess().getMembersMemberDeclParserRuleCall_4_1_1_0()); 
	    }
		lv_members_12_0=ruleMemberDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAppRequirementRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_12_0, 
        		"MemberDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getAppRequirementAccess().getRightCurlyBracketKeyword_4_1_2());
    }
)))
;





// Entry rule entryRuleDevice
entryRuleDevice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeviceRule()); }
	 iv_ruleDevice=ruleDevice 
	 { $current=$iv_ruleDevice.current; } 
	 EOF 
;

// Rule Device
ruleDevice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getDeviceAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeviceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeviceAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeviceRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getDeviceAccess().getTypeAppOrComponentCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getBasicTypeParserRuleCall_0()); 
    }
    this_BasicType_0=ruleBasicType
    { 
        $current = $this_BasicType_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTypeAccess().getListTypeBaseAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_1_0_0_1());
    }
	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_1_0_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTypeAccess().getSetTypeBaseAction_1_0_1_0(),
            $current);
    }
)	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getLeftCurlyBracketKeyword_1_0_1_1());
    }
	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypeAccess().getRightCurlyBracketKeyword_1_0_1_2());
    }
))+((	otherlv_7='?' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getQuestionMarkKeyword_1_1_0_0());
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTypeAccess().getOptionTypeBaseAction_1_1_0_1(),
            $current);
    }
))
    |(	otherlv_9='!' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTypeAccess().getExclamationMarkKeyword_1_1_1_0());
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTypeAccess().getSomeTypeBaseAction_1_1_1_1(),
            $current);
    }
))
    |(	otherlv_11='_' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTypeAccess().get_Keyword_1_1_2_0());
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTypeAccess().getNoneTypeBaseAction_1_1_2_1(),
            $current);
    }
)))?)?)
;





// Entry rule entryRuleBasicType
entryRuleBasicType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	 iv_ruleBasicType=ruleBasicType 
	 { $current=$iv_ruleBasicType.current; } 
	 EOF 
;

// Rule BasicType
ruleBasicType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getBasicTypeAccess().getBaseTypeTypeDeclCrossReference_0_0_0()); 
	}

)
)
    |(	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBasicTypeAccess().getLessThanSignKeyword_0_1_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getBasicTypeAccess().getTupleTypeAction_0_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicTypeAccess().getElemTypesTypeParserRuleCall_0_1_2_0()); 
	    }
		lv_elemTypes_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicTypeRule());
	        }
       		add(
       			$current, 
       			"elemTypes",
        		lv_elemTypes_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='*' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBasicTypeAccess().getAsteriskKeyword_0_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicTypeAccess().getElemTypesTypeParserRuleCall_0_1_3_1_0()); 
	    }
		lv_elemTypes_5_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicTypeRule());
	        }
       		add(
       			$current, 
       			"elemTypes",
        		lv_elemTypes_5_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_6='>' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBasicTypeAccess().getGreaterThanSignKeyword_0_1_4());
    }
))((	otherlv_7='?' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBasicTypeAccess().getQuestionMarkKeyword_1_0_0());
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBasicTypeAccess().getOptionTypeBaseAction_1_0_1(),
            $current);
    }
))
    |(	otherlv_9='_' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getBasicTypeAccess().get_Keyword_1_1_0());
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBasicTypeAccess().getNoneTypeBaseAction_1_1_1(),
            $current);
    }
)))?)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBasicLiteralParserRuleCall_0()); 
    }
    this_BasicLiteral_0=ruleBasicLiteral
    { 
        $current = $this_BasicLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getTupleLiteralParserRuleCall_1()); 
    }
    this_TupleLiteral_1=ruleTupleLiteral
    { 
        $current = $this_TupleLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getListLiteralParserRuleCall_2()); 
    }
    this_ListLiteral_2=ruleListLiteral
    { 
        $current = $this_ListLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getSetLiteralParserRuleCall_3()); 
    }
    this_SetLiteral_3=ruleSetLiteral
    { 
        $current = $this_SetLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getOptionLiteralParserRuleCall_4()); 
    }
    this_OptionLiteral_4=ruleOptionLiteral
    { 
        $current = $this_OptionLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBasicLiteral
entryRuleBasicLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicLiteralRule()); }
	 iv_ruleBasicLiteral=ruleBasicLiteral 
	 { $current=$iv_ruleBasicLiteral.current; } 
	 EOF 
;

// Rule BasicLiteral
ruleBasicLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicLiteralRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getBasicLiteralAccess().getTypeConsTypeDeclCrossReference_0_0()); 
	}

)
)(
(
		lv_lit_1_0=RULE_LIT
		{
			newLeafNode(lv_lit_1_0, grammarAccess.getBasicLiteralAccess().getLitLITTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lit",
        		lv_lit_1_0, 
        		"LIT");
	    }

)
))
;





// Entry rule entryRuleTupleLiteral
entryRuleTupleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupleLiteralRule()); }
	 iv_ruleTupleLiteral=ruleTupleLiteral 
	 { $current=$iv_ruleTupleLiteral.current; } 
	 EOF 
;

// Rule TupleLiteral
ruleTupleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTupleLiteralAccess().getLessThanSignKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getTupleLiteralAccess().getTupleLiteralAction_1(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTupleLiteralAccess().getElemsLiteralParserRuleCall_2_0_0()); 
	    }
		lv_elems_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleLiteralRule());
	        }
       		add(
       			$current, 
       			"elems",
        		lv_elems_2_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTupleLiteralAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleLiteralAccess().getElemsLiteralParserRuleCall_2_1_1_0()); 
	    }
		lv_elems_4_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleLiteralRule());
	        }
       		add(
       			$current, 
       			"elems",
        		lv_elems_4_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTupleLiteralAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleListLiteral
entryRuleListLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListLiteralRule()); }
	 iv_ruleListLiteral=ruleListLiteral 
	 { $current=$iv_ruleListLiteral.current; } 
	 EOF 
;

// Rule ListLiteral
ruleListLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getListLiteralAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListLiteralAccess().getBasicTypeBasicTypeParserRuleCall_1_0()); 
	    }
		lv_basicType_1_0=ruleBasicType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListLiteralRule());
	        }
       		set(
       			$current, 
       			"basicType",
        		lv_basicType_1_0, 
        		"BasicType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getListLiteralAccess().getColonKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getListLiteralAccess().getElemsSimpleLiteralParserRuleCall_3_0_0()); 
	    }
		lv_elems_3_0=ruleSimpleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListLiteralRule());
	        }
       		add(
       			$current, 
       			"elems",
        		lv_elems_3_0, 
        		"SimpleLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getListLiteralAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListLiteralAccess().getElemsSimpleLiteralParserRuleCall_3_1_1_0()); 
	    }
		lv_elems_5_0=ruleSimpleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListLiteralRule());
	        }
       		add(
       			$current, 
       			"elems",
        		lv_elems_5_0, 
        		"SimpleLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getListLiteralAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSetLiteral
entryRuleSetLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetLiteralRule()); }
	 iv_ruleSetLiteral=ruleSetLiteral 
	 { $current=$iv_ruleSetLiteral.current; } 
	 EOF 
;

// Rule SetLiteral
ruleSetLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetLiteralAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetLiteralAccess().getBasicTypeBasicTypeParserRuleCall_1_0()); 
	    }
		lv_basicType_1_0=ruleBasicType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetLiteralRule());
	        }
       		set(
       			$current, 
       			"basicType",
        		lv_basicType_1_0, 
        		"BasicType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetLiteralAccess().getColonKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSetLiteralAccess().getElemsSimpleLiteralParserRuleCall_3_0_0()); 
	    }
		lv_elems_3_0=ruleSimpleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetLiteralRule());
	        }
       		add(
       			$current, 
       			"elems",
        		lv_elems_3_0, 
        		"SimpleLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSetLiteralAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetLiteralAccess().getElemsSimpleLiteralParserRuleCall_3_1_1_0()); 
	    }
		lv_elems_5_0=ruleSimpleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetLiteralRule());
	        }
       		add(
       			$current, 
       			"elems",
        		lv_elems_5_0, 
        		"SimpleLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSetLiteralAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleOptionLiteral
entryRuleOptionLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionLiteralRule()); }
	 iv_ruleOptionLiteral=ruleOptionLiteral 
	 { $current=$iv_ruleOptionLiteral.current; } 
	 EOF 
;

// Rule OptionLiteral
ruleOptionLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='none' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOptionLiteralAccess().getNoneKeyword_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getOptionLiteralAccess().getNoneLiteralAction_0_1(),
            $current);
    }
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOptionLiteralAccess().getColonKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionLiteralAccess().getTypeTypeParserRuleCall_0_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionLiteralRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='some' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOptionLiteralAccess().getSomeKeyword_1_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getOptionLiteralAccess().getSomeLiteralAction_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionLiteralAccess().getLitLiteralParserRuleCall_1_2_0()); 
	    }
		lv_lit_6_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionLiteralRule());
	        }
       		set(
       			$current, 
       			"lit",
        		lv_lit_6_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleSimpleLiteral
entryRuleSimpleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleLiteralRule()); }
	 iv_ruleSimpleLiteral=ruleSimpleLiteral 
	 { $current=$iv_ruleSimpleLiteral.current; } 
	 EOF 
;

// Rule SimpleLiteral
ruleSimpleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSimpleLiteralAccess().getSimpleBasicLiteralParserRuleCall_0()); 
    }
    this_SimpleBasicLiteral_0=ruleSimpleBasicLiteral
    { 
        $current = $this_SimpleBasicLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleLiteralAccess().getSimpleTupleLiteralParserRuleCall_1()); 
    }
    this_SimpleTupleLiteral_1=ruleSimpleTupleLiteral
    { 
        $current = $this_SimpleTupleLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleLiteralAccess().getSimpleListLiteralParserRuleCall_2()); 
    }
    this_SimpleListLiteral_2=ruleSimpleListLiteral
    { 
        $current = $this_SimpleListLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleLiteralAccess().getSimpleSetLiteralParserRuleCall_3()); 
    }
    this_SimpleSetLiteral_3=ruleSimpleSetLiteral
    { 
        $current = $this_SimpleSetLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleLiteralAccess().getSimpleOptionLiteralParserRuleCall_4()); 
    }
    this_SimpleOptionLiteral_4=ruleSimpleOptionLiteral
    { 
        $current = $this_SimpleOptionLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSimpleBasicLiteral
entryRuleSimpleBasicLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleBasicLiteralRule()); }
	 iv_ruleSimpleBasicLiteral=ruleSimpleBasicLiteral 
	 { $current=$iv_ruleSimpleBasicLiteral.current; } 
	 EOF 
;

// Rule SimpleBasicLiteral
ruleSimpleBasicLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_lit_0_0=RULE_LIT
		{
			newLeafNode(lv_lit_0_0, grammarAccess.getSimpleBasicLiteralAccess().getLitLITTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleBasicLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lit",
        		lv_lit_0_0, 
        		"LIT");
	    }

)
)
;





// Entry rule entryRuleSimpleTupleLiteral
entryRuleSimpleTupleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleTupleLiteralRule()); }
	 iv_ruleSimpleTupleLiteral=ruleSimpleTupleLiteral 
	 { $current=$iv_ruleSimpleTupleLiteral.current; } 
	 EOF 
;

// Rule SimpleTupleLiteral
ruleSimpleTupleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleTupleLiteralAccess().getLessThanSignKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleTupleLiteralAccess().getSimpleTupleLiteralAction_1(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleTupleLiteralAccess().getElemsSimpleLiteralParserRuleCall_2_0_0()); 
	    }
		lv_elems_2_0=ruleSimpleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleTupleLiteralRule());
	        }
       		add(
       			$current, 
       			"elems",
        		lv_elems_2_0, 
        		"SimpleLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimpleTupleLiteralAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleTupleLiteralAccess().getElemsSimpleLiteralParserRuleCall_2_1_1_0()); 
	    }
		lv_elems_4_0=ruleSimpleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleTupleLiteralRule());
	        }
       		add(
       			$current, 
       			"elems",
        		lv_elems_4_0, 
        		"SimpleLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSimpleTupleLiteralAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleSimpleOptionLiteral
entryRuleSimpleOptionLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleOptionLiteralRule()); }
	 iv_ruleSimpleOptionLiteral=ruleSimpleOptionLiteral 
	 { $current=$iv_ruleSimpleOptionLiteral.current; } 
	 EOF 
;

// Rule SimpleOptionLiteral
ruleSimpleOptionLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='none' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleOptionLiteralAccess().getNoneKeyword_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleOptionLiteralAccess().getSimpleNoneLiteralAction_0_1(),
            $current);
    }
))
    |(	otherlv_2='some' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimpleOptionLiteralAccess().getSomeKeyword_1_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleOptionLiteralAccess().getSimpleSomeLiteralAction_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleOptionLiteralAccess().getLitSimpleLiteralParserRuleCall_1_2_0()); 
	    }
		lv_lit_4_0=ruleSimpleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleOptionLiteralRule());
	        }
       		set(
       			$current, 
       			"lit",
        		lv_lit_4_0, 
        		"SimpleLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleSimpleListLiteral
entryRuleSimpleListLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleListLiteralRule()); }
	 iv_ruleSimpleListLiteral=ruleSimpleListLiteral 
	 { $current=$iv_ruleSimpleListLiteral.current; } 
	 EOF 
;

// Rule SimpleListLiteral
ruleSimpleListLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleListLiteralAccess().getLeftSquareBracketKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleListLiteralAccess().getSimpleListLiteralAction_1(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleListLiteralAccess().getElemsSimpleLiteralParserRuleCall_2_0_0()); 
	    }
		lv_elems_2_0=ruleSimpleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleListLiteralRule());
	        }
       		add(
       			$current, 
       			"elems",
        		lv_elems_2_0, 
        		"SimpleLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimpleListLiteralAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleListLiteralAccess().getElemsSimpleLiteralParserRuleCall_2_1_1_0()); 
	    }
		lv_elems_4_0=ruleSimpleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleListLiteralRule());
	        }
       		add(
       			$current, 
       			"elems",
        		lv_elems_4_0, 
        		"SimpleLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSimpleListLiteralAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleSimpleSetLiteral
entryRuleSimpleSetLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleSetLiteralRule()); }
	 iv_ruleSimpleSetLiteral=ruleSimpleSetLiteral 
	 { $current=$iv_ruleSimpleSetLiteral.current; } 
	 EOF 
;

// Rule SimpleSetLiteral
ruleSimpleSetLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleSetLiteralAccess().getLeftCurlyBracketKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleSetLiteralAccess().getSimpleSetLiteralAction_1(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleSetLiteralAccess().getElemsSimpleLiteralParserRuleCall_2_0_0()); 
	    }
		lv_elems_2_0=ruleSimpleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleSetLiteralRule());
	        }
       		add(
       			$current, 
       			"elems",
        		lv_elems_2_0, 
        		"SimpleLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimpleSetLiteralAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleSetLiteralAccess().getElemsSimpleLiteralParserRuleCall_2_1_1_0()); 
	    }
		lv_elems_4_0=ruleSimpleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleSetLiteralRule());
	        }
       		add(
       			$current, 
       			"elems",
        		lv_elems_4_0, 
        		"SimpleLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSimpleSetLiteralAccess().getRightCurlyBracketKeyword_3());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_LIT : '(' ( options {greedy=false;} : . )*')';

RULE_NAT : ('0'|'1'..'9' ('0'..'9')*);

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


