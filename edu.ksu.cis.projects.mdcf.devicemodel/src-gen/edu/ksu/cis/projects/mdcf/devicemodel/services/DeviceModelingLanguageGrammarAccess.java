/*
* generated by Xtext
*/

package edu.ksu.cis.projects.mdcf.devicemodel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DeviceModelingLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cDeclsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclsDeclParserRuleCall_0 = (RuleCall)cDeclsAssignment.eContents().get(0);
		
		//Model:
		//	decls+=Decl*;
		public ParserRule getRule() { return rule; }

		//decls+=Decl*
		public Assignment getDeclsAssignment() { return cDeclsAssignment; }

		//Decl
		public RuleCall getDeclsDeclParserRuleCall_0() { return cDeclsDeclParserRuleCall_0; }
	}

	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAppRequirementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Decl:
		//	TypeDecl | ComponentDecl | AppRequirement;
		public ParserRule getRule() { return rule; }

		//TypeDecl | ComponentDecl | AppRequirement
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDecl
		public RuleCall getTypeDeclParserRuleCall_0() { return cTypeDeclParserRuleCall_0; }

		//ComponentDecl
		public RuleCall getComponentDeclParserRuleCall_1() { return cComponentDeclParserRuleCall_1; }

		//AppRequirement
		public RuleCall getAppRequirementParserRuleCall_2() { return cAppRequirementParserRuleCall_2; }
	}

	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TypeDecl:
		//	"type" name=ID;
		public ParserRule getRule() { return rule; }

		//"type" name=ID
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ComponentDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cComponentKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Action cComponentAction_0_0_1 = (Action)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cInstanceKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Action cInstanceAction_0_1_1 = (Action)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSupersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSupersComponentDeclCrossReference_2_1_0 = (CrossReference)cSupersAssignment_2_1.eContents().get(0);
		private final RuleCall cSupersComponentDeclIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSupersComponentDeclCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cWithKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSupersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cSupersComponentDeclCrossReference_2_2_1_0 = (CrossReference)cSupersAssignment_2_2_1.eContents().get(0);
		private final RuleCall cSupersComponentDeclIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cSupersComponentDeclCrossReference_2_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMembersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMembersMemberDeclParserRuleCall_3_1_0 = (RuleCall)cMembersAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//ComponentDecl:
		//	("component" {Component} | "instance" {Instance}) name=ID ("extends" supers+=[ComponentDecl] ("with"
		//	supers+=[ComponentDecl])*)? ("{" members+=MemberDecl* "}")?;
		public ParserRule getRule() { return rule; }

		//("component" {Component} | "instance" {Instance}) name=ID ("extends" supers+=[ComponentDecl] ("with"
		//supers+=[ComponentDecl])*)? ("{" members+=MemberDecl* "}")?
		public Group getGroup() { return cGroup; }

		//"component" {Component} | "instance" {Instance}
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"component" {Component}
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"component"
		public Keyword getComponentKeyword_0_0_0() { return cComponentKeyword_0_0_0; }

		//{Component}
		public Action getComponentAction_0_0_1() { return cComponentAction_0_0_1; }

		//"instance" {Instance}
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"instance"
		public Keyword getInstanceKeyword_0_1_0() { return cInstanceKeyword_0_1_0; }

		//{Instance}
		public Action getInstanceAction_0_1_1() { return cInstanceAction_0_1_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" supers+=[ComponentDecl] ("with" supers+=[ComponentDecl])*)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//supers+=[ComponentDecl]
		public Assignment getSupersAssignment_2_1() { return cSupersAssignment_2_1; }

		//[ComponentDecl]
		public CrossReference getSupersComponentDeclCrossReference_2_1_0() { return cSupersComponentDeclCrossReference_2_1_0; }

		//ID
		public RuleCall getSupersComponentDeclIDTerminalRuleCall_2_1_0_1() { return cSupersComponentDeclIDTerminalRuleCall_2_1_0_1; }

		//("with" supers+=[ComponentDecl])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"with"
		public Keyword getWithKeyword_2_2_0() { return cWithKeyword_2_2_0; }

		//supers+=[ComponentDecl]
		public Assignment getSupersAssignment_2_2_1() { return cSupersAssignment_2_2_1; }

		//[ComponentDecl]
		public CrossReference getSupersComponentDeclCrossReference_2_2_1_0() { return cSupersComponentDeclCrossReference_2_2_1_0; }

		//ID
		public RuleCall getSupersComponentDeclIDTerminalRuleCall_2_2_1_0_1() { return cSupersComponentDeclIDTerminalRuleCall_2_2_1_0_1; }

		//("{" members+=MemberDecl* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//members+=MemberDecl*
		public Assignment getMembersAssignment_3_1() { return cMembersAssignment_3_1; }

		//MemberDecl
		public RuleCall getMembersMemberDeclParserRuleCall_3_1_0() { return cMembersMemberDeclParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class MemberDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttrDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubMemberDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInvariantDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MemberDecl:
		//	AttrDecl | SubMemberDecl | InvariantDecl;
		public ParserRule getRule() { return rule; }

		//AttrDecl | SubMemberDecl | InvariantDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttrDecl
		public RuleCall getAttrDeclParserRuleCall_0() { return cAttrDeclParserRuleCall_0; }

		//SubMemberDecl
		public RuleCall getSubMemberDeclParserRuleCall_1() { return cSubMemberDeclParserRuleCall_1; }

		//InvariantDecl
		public RuleCall getInvariantDeclParserRuleCall_2() { return cInvariantDeclParserRuleCall_2; }
	}

	public class AttrDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttrDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierModifierParserRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cAttributeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeNameIDTerminalRuleCall_1_0 = (RuleCall)cAttributeNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_0_1_0 = (RuleCall)cTypeAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cLiteralAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_2_0_2_1_0 = (RuleCall)cLiteralAssignment_2_0_2_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLiteralAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_2_1_1_0 = (RuleCall)cLiteralAssignment_2_1_1.eContents().get(0);
		
		//AttrDecl:
		//	modifier=Modifier attributeName=ID (":" type=Type ("=" literal=Literal)? | "=" literal=Literal);
		public ParserRule getRule() { return rule; }

		//modifier=Modifier attributeName=ID (":" type=Type ("=" literal=Literal)? | "=" literal=Literal)
		public Group getGroup() { return cGroup; }

		//modifier=Modifier
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//Modifier
		public RuleCall getModifierModifierParserRuleCall_0_0() { return cModifierModifierParserRuleCall_0_0; }

		//attributeName=ID
		public Assignment getAttributeNameAssignment_1() { return cAttributeNameAssignment_1; }

		//ID
		public RuleCall getAttributeNameIDTerminalRuleCall_1_0() { return cAttributeNameIDTerminalRuleCall_1_0; }

		//":" type=Type ("=" literal=Literal)? | "=" literal=Literal
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//":" type=Type ("=" literal=Literal)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//":"
		public Keyword getColonKeyword_2_0_0() { return cColonKeyword_2_0_0; }

		//type=Type
		public Assignment getTypeAssignment_2_0_1() { return cTypeAssignment_2_0_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0_1_0() { return cTypeTypeParserRuleCall_2_0_1_0; }

		//("=" literal=Literal)?
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_2_0() { return cEqualsSignKeyword_2_0_2_0; }

		//literal=Literal
		public Assignment getLiteralAssignment_2_0_2_1() { return cLiteralAssignment_2_0_2_1; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_2_0_2_1_0() { return cLiteralLiteralParserRuleCall_2_0_2_1_0; }

		//"=" literal=Literal
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_0() { return cEqualsSignKeyword_2_1_0; }

		//literal=Literal
		public Assignment getLiteralAssignment_2_1_1() { return cLiteralAssignment_2_1_1; }

		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_2_1_1_0() { return cLiteralLiteralParserRuleCall_2_1_1_0; }
	}

	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cValKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVarKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDefKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Modifier:
		//	"const" | "val" | "var" | "def";
		public ParserRule getRule() { return rule; }

		//"const" | "val" | "var" | "def"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//"val"
		public Keyword getValKeyword_1() { return cValKeyword_1; }

		//"var"
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }

		//"def"
		public Keyword getDefKeyword_3() { return cDefKeyword_3; }
	}

	public class SubMemberDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubMemberDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubMemberDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cSupersAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final CrossReference cSupersComponentDeclCrossReference_2_0_1_0 = (CrossReference)cSupersAssignment_2_0_1.eContents().get(0);
		private final RuleCall cSupersComponentDeclIDTerminalRuleCall_2_0_1_0_1 = (RuleCall)cSupersComponentDeclCrossReference_2_0_1_0.eContents().get(1);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cWithKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cSupersAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final CrossReference cSupersComponentDeclCrossReference_2_0_2_1_0 = (CrossReference)cSupersAssignment_2_0_2_1.eContents().get(0);
		private final RuleCall cSupersComponentDeclIDTerminalRuleCall_2_0_2_1_0_1 = (RuleCall)cSupersComponentDeclCrossReference_2_0_2_1_0.eContents().get(1);
		private final Group cGroup_2_0_3 = (Group)cGroup_2_0.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_2_0_3_0 = (Keyword)cGroup_2_0_3.eContents().get(0);
		private final Assignment cMembersAssignment_2_0_3_1 = (Assignment)cGroup_2_0_3.eContents().get(1);
		private final RuleCall cMembersMemberDeclParserRuleCall_2_0_3_1_0 = (RuleCall)cMembersAssignment_2_0_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_3_2 = (Keyword)cGroup_2_0_3.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMembersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMembersMemberDeclParserRuleCall_2_1_1_0 = (RuleCall)cMembersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//SubMemberDecl:
		//	{SubMemberDecl} name=ID (":" supers+=[ComponentDecl] ("with" supers+=[ComponentDecl])* ("{" members+=MemberDecl* "}")?
		//	| "{" members+=MemberDecl* "}");
		public ParserRule getRule() { return rule; }

		//{SubMemberDecl} name=ID (":" supers+=[ComponentDecl] ("with" supers+=[ComponentDecl])* ("{" members+=MemberDecl* "}")? |
		//"{" members+=MemberDecl* "}")
		public Group getGroup() { return cGroup; }

		//{SubMemberDecl}
		public Action getSubMemberDeclAction_0() { return cSubMemberDeclAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":" supers+=[ComponentDecl] ("with" supers+=[ComponentDecl])* ("{" members+=MemberDecl* "}")? | "{" members+=MemberDecl*
		//"}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//":" supers+=[ComponentDecl] ("with" supers+=[ComponentDecl])* ("{" members+=MemberDecl* "}")?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//":"
		public Keyword getColonKeyword_2_0_0() { return cColonKeyword_2_0_0; }

		//supers+=[ComponentDecl]
		public Assignment getSupersAssignment_2_0_1() { return cSupersAssignment_2_0_1; }

		//[ComponentDecl]
		public CrossReference getSupersComponentDeclCrossReference_2_0_1_0() { return cSupersComponentDeclCrossReference_2_0_1_0; }

		//ID
		public RuleCall getSupersComponentDeclIDTerminalRuleCall_2_0_1_0_1() { return cSupersComponentDeclIDTerminalRuleCall_2_0_1_0_1; }

		//("with" supers+=[ComponentDecl])*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//"with"
		public Keyword getWithKeyword_2_0_2_0() { return cWithKeyword_2_0_2_0; }

		//supers+=[ComponentDecl]
		public Assignment getSupersAssignment_2_0_2_1() { return cSupersAssignment_2_0_2_1; }

		//[ComponentDecl]
		public CrossReference getSupersComponentDeclCrossReference_2_0_2_1_0() { return cSupersComponentDeclCrossReference_2_0_2_1_0; }

		//ID
		public RuleCall getSupersComponentDeclIDTerminalRuleCall_2_0_2_1_0_1() { return cSupersComponentDeclIDTerminalRuleCall_2_0_2_1_0_1; }

		//("{" members+=MemberDecl* "}")?
		public Group getGroup_2_0_3() { return cGroup_2_0_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_3_0() { return cLeftCurlyBracketKeyword_2_0_3_0; }

		//members+=MemberDecl*
		public Assignment getMembersAssignment_2_0_3_1() { return cMembersAssignment_2_0_3_1; }

		//MemberDecl
		public RuleCall getMembersMemberDeclParserRuleCall_2_0_3_1_0() { return cMembersMemberDeclParserRuleCall_2_0_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_0_3_2() { return cRightCurlyBracketKeyword_2_0_3_2; }

		//"{" members+=MemberDecl* "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//members+=MemberDecl*
		public Assignment getMembersAssignment_2_1_1() { return cMembersAssignment_2_1_1; }

		//MemberDecl
		public RuleCall getMembersMemberDeclParserRuleCall_2_1_1_0() { return cMembersMemberDeclParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}

	public class InvariantDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvariantDecl");
		private final RuleCall cMultiplicityInvariantDeclParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InvariantDecl:
		//	MultiplicityInvariantDecl;
		public ParserRule getRule() { return rule; }

		//MultiplicityInvariantDecl
		public RuleCall getMultiplicityInvariantDeclParserRuleCall() { return cMultiplicityInvariantDeclParserRuleCall; }
	}

	public class MultiplicityInvariantDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicityInvariantDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cInvNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInvNameIDTerminalRuleCall_1_0_0 = (RuleCall)cInvNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLoAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLoConstraintNatParserRuleCall_2_0_0 = (RuleCall)cLoAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cHiAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cHiConstraintNatParserRuleCall_2_2_0 = (RuleCall)cHiAssignment_2_2.eContents().get(0);
		private final Assignment cMatchAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMatchSubMemberMatchParserRuleCall_3_0 = (RuleCall)cMatchAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cTypeComponentDeclCrossReference_4_1_0 = (CrossReference)cTypeAssignment_4_1.eContents().get(0);
		private final RuleCall cTypeComponentDeclIDTerminalRuleCall_4_1_0_1 = (RuleCall)cTypeComponentDeclCrossReference_4_1_0.eContents().get(1);
		
		//MultiplicityInvariantDecl:
		//	"inv" (invName=ID ":")? (lo=ConstraintNat ".." hi=ConstraintNat) match=SubMemberMatch (":" type=[ComponentDecl])?;
		public ParserRule getRule() { return rule; }

		//"inv" (invName=ID ":")? (lo=ConstraintNat ".." hi=ConstraintNat) match=SubMemberMatch (":" type=[ComponentDecl])?
		public Group getGroup() { return cGroup; }

		//"inv"
		public Keyword getInvKeyword_0() { return cInvKeyword_0; }

		//(invName=ID ":")?
		public Group getGroup_1() { return cGroup_1; }

		//invName=ID
		public Assignment getInvNameAssignment_1_0() { return cInvNameAssignment_1_0; }

		//ID
		public RuleCall getInvNameIDTerminalRuleCall_1_0_0() { return cInvNameIDTerminalRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//lo=ConstraintNat ".." hi=ConstraintNat
		public Group getGroup_2() { return cGroup_2; }

		//lo=ConstraintNat
		public Assignment getLoAssignment_2_0() { return cLoAssignment_2_0; }

		//ConstraintNat
		public RuleCall getLoConstraintNatParserRuleCall_2_0_0() { return cLoConstraintNatParserRuleCall_2_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2_1() { return cFullStopFullStopKeyword_2_1; }

		//hi=ConstraintNat
		public Assignment getHiAssignment_2_2() { return cHiAssignment_2_2; }

		//ConstraintNat
		public RuleCall getHiConstraintNatParserRuleCall_2_2_0() { return cHiConstraintNatParserRuleCall_2_2_0; }

		//match=SubMemberMatch
		public Assignment getMatchAssignment_3() { return cMatchAssignment_3; }

		//SubMemberMatch
		public RuleCall getMatchSubMemberMatchParserRuleCall_3_0() { return cMatchSubMemberMatchParserRuleCall_3_0; }

		//(":" type=[ComponentDecl])?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//type=[ComponentDecl]
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//[ComponentDecl]
		public CrossReference getTypeComponentDeclCrossReference_4_1_0() { return cTypeComponentDeclCrossReference_4_1_0; }

		//ID
		public RuleCall getTypeComponentDeclIDTerminalRuleCall_4_1_0_1() { return cTypeComponentDeclIDTerminalRuleCall_4_1_0_1; }
	}

	public class SubMemberMatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubMemberMatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubMemberMatchAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cQNamesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cQNamesIDTerminalRuleCall_1_0_0 = (RuleCall)cQNamesAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Assignment cAnyAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cAnyAsteriskKeyword_2_1_0 = (Keyword)cAnyAssignment_2_1.eContents().get(0);
		
		//SubMemberMatch:
		//	{SubMemberMatch} (qNames+=ID ".")* (name=ID | any="*");
		public ParserRule getRule() { return rule; }

		//{SubMemberMatch} (qNames+=ID ".")* (name=ID | any="*")
		public Group getGroup() { return cGroup; }

		//{SubMemberMatch}
		public Action getSubMemberMatchAction_0() { return cSubMemberMatchAction_0; }

		//(qNames+=ID ".")*
		public Group getGroup_1() { return cGroup_1; }

		//qNames+=ID
		public Assignment getQNamesAssignment_1_0() { return cQNamesAssignment_1_0; }

		//ID
		public RuleCall getQNamesIDTerminalRuleCall_1_0_0() { return cQNamesIDTerminalRuleCall_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//name=ID | any="*"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//name=ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }

		//any="*"
		public Assignment getAnyAssignment_2_1() { return cAnyAssignment_2_1; }

		//"*"
		public Keyword getAnyAsteriskKeyword_2_1_0() { return cAnyAsteriskKeyword_2_1_0; }
	}

	public class ConstraintNatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintNat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumNatConstraintAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNumAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNumNATTerminalRuleCall_0_1_0 = (RuleCall)cNumAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAnyNatConstraintAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ConstraintNat:
		//	{NumNatConstraint} num=NAT | {AnyNatConstraint} "*";
		public ParserRule getRule() { return rule; }

		//{NumNatConstraint} num=NAT | {AnyNatConstraint} "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NumNatConstraint} num=NAT
		public Group getGroup_0() { return cGroup_0; }

		//{NumNatConstraint}
		public Action getNumNatConstraintAction_0_0() { return cNumNatConstraintAction_0_0; }

		//num=NAT
		public Assignment getNumAssignment_0_1() { return cNumAssignment_0_1; }

		//NAT
		public RuleCall getNumNATTerminalRuleCall_0_1_0() { return cNumNATTerminalRuleCall_0_1_0; }

		//{AnyNatConstraint} "*"
		public Group getGroup_1() { return cGroup_1; }

		//{AnyNatConstraint}
		public Action getAnyNatConstraintAction_1_0() { return cAnyNatConstraintAction_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class AppOrComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AppOrComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAppRequirementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AppOrComponent:
		//	ComponentDecl | AppRequirement;
		public ParserRule getRule() { return rule; }

		//ComponentDecl | AppRequirement
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComponentDecl
		public RuleCall getComponentDeclParserRuleCall_0() { return cComponentDeclParserRuleCall_0; }

		//AppRequirement
		public RuleCall getAppRequirementParserRuleCall_1() { return cAppRequirementParserRuleCall_1; }
	}

	public class AppRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AppRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRequiresKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDevicesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDevicesDeviceParserRuleCall_3_0 = (RuleCall)cDevicesAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cExtendsKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cSupersAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final CrossReference cSupersComponentDeclCrossReference_4_0_1_0 = (CrossReference)cSupersAssignment_4_0_1.eContents().get(0);
		private final RuleCall cSupersComponentDeclIDTerminalRuleCall_4_0_1_0_1 = (RuleCall)cSupersComponentDeclCrossReference_4_0_1_0.eContents().get(1);
		private final Group cGroup_4_0_2 = (Group)cGroup_4_0.eContents().get(2);
		private final Keyword cWithKeyword_4_0_2_0 = (Keyword)cGroup_4_0_2.eContents().get(0);
		private final Assignment cSupersAssignment_4_0_2_1 = (Assignment)cGroup_4_0_2.eContents().get(1);
		private final CrossReference cSupersComponentDeclCrossReference_4_0_2_1_0 = (CrossReference)cSupersAssignment_4_0_2_1.eContents().get(0);
		private final RuleCall cSupersComponentDeclIDTerminalRuleCall_4_0_2_1_0_1 = (RuleCall)cSupersComponentDeclCrossReference_4_0_2_1_0.eContents().get(1);
		private final Group cGroup_4_0_3 = (Group)cGroup_4_0.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4_0_3_0 = (Keyword)cGroup_4_0_3.eContents().get(0);
		private final Assignment cMembersAssignment_4_0_3_1 = (Assignment)cGroup_4_0_3.eContents().get(1);
		private final RuleCall cMembersMemberDeclParserRuleCall_4_0_3_1_0 = (RuleCall)cMembersAssignment_4_0_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_3_2 = (Keyword)cGroup_4_0_3.eContents().get(2);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cMembersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cMembersMemberDeclParserRuleCall_4_1_1_0 = (RuleCall)cMembersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		
		//AppRequirement:
		//	"app" name=ID "requires" devices+=Device* ("extends" supers+=[ComponentDecl] ("with" supers+=[ComponentDecl])* ("{"
		//	members+=MemberDecl* "}")? | "{" members+=MemberDecl* "}");
		public ParserRule getRule() { return rule; }

		//"app" name=ID "requires" devices+=Device* ("extends" supers+=[ComponentDecl] ("with" supers+=[ComponentDecl])* ("{"
		//members+=MemberDecl* "}")? | "{" members+=MemberDecl* "}")
		public Group getGroup() { return cGroup; }

		//"app"
		public Keyword getAppKeyword_0() { return cAppKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"requires"
		public Keyword getRequiresKeyword_2() { return cRequiresKeyword_2; }

		//devices+=Device*
		public Assignment getDevicesAssignment_3() { return cDevicesAssignment_3; }

		//Device
		public RuleCall getDevicesDeviceParserRuleCall_3_0() { return cDevicesDeviceParserRuleCall_3_0; }

		//"extends" supers+=[ComponentDecl] ("with" supers+=[ComponentDecl])* ("{" members+=MemberDecl* "}")? | "{"
		//members+=MemberDecl* "}"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"extends" supers+=[ComponentDecl] ("with" supers+=[ComponentDecl])* ("{" members+=MemberDecl* "}")?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"extends"
		public Keyword getExtendsKeyword_4_0_0() { return cExtendsKeyword_4_0_0; }

		//supers+=[ComponentDecl]
		public Assignment getSupersAssignment_4_0_1() { return cSupersAssignment_4_0_1; }

		//[ComponentDecl]
		public CrossReference getSupersComponentDeclCrossReference_4_0_1_0() { return cSupersComponentDeclCrossReference_4_0_1_0; }

		//ID
		public RuleCall getSupersComponentDeclIDTerminalRuleCall_4_0_1_0_1() { return cSupersComponentDeclIDTerminalRuleCall_4_0_1_0_1; }

		//("with" supers+=[ComponentDecl])*
		public Group getGroup_4_0_2() { return cGroup_4_0_2; }

		//"with"
		public Keyword getWithKeyword_4_0_2_0() { return cWithKeyword_4_0_2_0; }

		//supers+=[ComponentDecl]
		public Assignment getSupersAssignment_4_0_2_1() { return cSupersAssignment_4_0_2_1; }

		//[ComponentDecl]
		public CrossReference getSupersComponentDeclCrossReference_4_0_2_1_0() { return cSupersComponentDeclCrossReference_4_0_2_1_0; }

		//ID
		public RuleCall getSupersComponentDeclIDTerminalRuleCall_4_0_2_1_0_1() { return cSupersComponentDeclIDTerminalRuleCall_4_0_2_1_0_1; }

		//("{" members+=MemberDecl* "}")?
		public Group getGroup_4_0_3() { return cGroup_4_0_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0_3_0() { return cLeftCurlyBracketKeyword_4_0_3_0; }

		//members+=MemberDecl*
		public Assignment getMembersAssignment_4_0_3_1() { return cMembersAssignment_4_0_3_1; }

		//MemberDecl
		public RuleCall getMembersMemberDeclParserRuleCall_4_0_3_1_0() { return cMembersMemberDeclParserRuleCall_4_0_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_0_3_2() { return cRightCurlyBracketKeyword_4_0_3_2; }

		//"{" members+=MemberDecl* "}"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1_0() { return cLeftCurlyBracketKeyword_4_1_0; }

		//members+=MemberDecl*
		public Assignment getMembersAssignment_4_1_1() { return cMembersAssignment_4_1_1; }

		//MemberDecl
		public RuleCall getMembersMemberDeclParserRuleCall_4_1_1_0() { return cMembersMemberDeclParserRuleCall_4_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_1_2() { return cRightCurlyBracketKeyword_4_1_2; }
	}

	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Device");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeAppOrComponentCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeAppOrComponentIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeAppOrComponentCrossReference_2_0.eContents().get(1);
		
		//Device:
		//	name=ID ":" type=[AppOrComponent];
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=[AppOrComponent]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=[AppOrComponent]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[AppOrComponent]
		public CrossReference getTypeAppOrComponentCrossReference_2_0() { return cTypeAppOrComponentCrossReference_2_0; }

		//ID
		public RuleCall getTypeAppOrComponentIDTerminalRuleCall_2_0_1() { return cTypeAppOrComponentIDTerminalRuleCall_2_0_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cListTypeBaseAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_0_0_2 = (Keyword)cGroup_1_0_0.eContents().get(2);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cSetTypeBaseAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_0_1_2 = (Keyword)cGroup_1_0_1.eContents().get(2);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Action cOptionTypeBaseAction_1_1_0_1 = (Action)cGroup_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Action cSomeTypeBaseAction_1_1_1_1 = (Action)cGroup_1_1_1.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cAlternatives_1_1.eContents().get(2);
		private final Keyword c_Keyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Action cNoneTypeBaseAction_1_1_2_1 = (Action)cGroup_1_1_2.eContents().get(1);
		
		//Type:
		//	BasicType (({ListType.base=current} "[" "]" | {SetType.base=current} "{" "}")+ ("?" {OptionType.base=current} | "!"
		//	{SomeType.base=current} | "_" {NoneType.base=current})?)?;
		public ParserRule getRule() { return rule; }

		//BasicType (({ListType.base=current} "[" "]" | {SetType.base=current} "{" "}")+ ("?" {OptionType.base=current} | "!"
		//{SomeType.base=current} | "_" {NoneType.base=current})?)?
		public Group getGroup() { return cGroup; }

		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }

		//(({ListType.base=current} "[" "]" | {SetType.base=current} "{" "}")+ ("?" {OptionType.base=current} | "!"
		//{SomeType.base=current} | "_" {NoneType.base=current})?)?
		public Group getGroup_1() { return cGroup_1; }

		//({ListType.base=current} "[" "]" | {SetType.base=current} "{" "}")+
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ListType.base=current} "[" "]"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ListType.base=current}
		public Action getListTypeBaseAction_1_0_0_0() { return cListTypeBaseAction_1_0_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0_1() { return cLeftSquareBracketKeyword_1_0_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_0_2() { return cRightSquareBracketKeyword_1_0_0_2; }

		//{SetType.base=current} "{" "}"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{SetType.base=current}
		public Action getSetTypeBaseAction_1_0_1_0() { return cSetTypeBaseAction_1_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_1_1() { return cLeftCurlyBracketKeyword_1_0_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_1_2() { return cRightCurlyBracketKeyword_1_0_1_2; }

		//("?" {OptionType.base=current} | "!" {SomeType.base=current} | "_" {NoneType.base=current})?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"?" {OptionType.base=current}
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1_0_0() { return cQuestionMarkKeyword_1_1_0_0; }

		//{OptionType.base=current}
		public Action getOptionTypeBaseAction_1_1_0_1() { return cOptionTypeBaseAction_1_1_0_1; }

		//"!" {SomeType.base=current}
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1_1_0() { return cExclamationMarkKeyword_1_1_1_0; }

		//{SomeType.base=current}
		public Action getSomeTypeBaseAction_1_1_1_1() { return cSomeTypeBaseAction_1_1_1_1; }

		//"_" {NoneType.base=current}
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//"_"
		public Keyword get_Keyword_1_1_2_0() { return c_Keyword_1_1_2_0; }

		//{NoneType.base=current}
		public Action getNoneTypeBaseAction_1_1_2_1() { return cNoneTypeBaseAction_1_1_2_1; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cBaseTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cBaseTypeTypeDeclCrossReference_0_0_0 = (CrossReference)cBaseTypeAssignment_0_0.eContents().get(0);
		private final RuleCall cBaseTypeTypeDeclIDTerminalRuleCall_0_0_0_1 = (RuleCall)cBaseTypeTypeDeclCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Action cTupleTypeAction_0_1_1 = (Action)cGroup_0_1.eContents().get(1);
		private final Assignment cElemTypesAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cElemTypesTypeParserRuleCall_0_1_2_0 = (RuleCall)cElemTypesAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_0_1_3 = (Group)cGroup_0_1.eContents().get(3);
		private final Keyword cAsteriskKeyword_0_1_3_0 = (Keyword)cGroup_0_1_3.eContents().get(0);
		private final Assignment cElemTypesAssignment_0_1_3_1 = (Assignment)cGroup_0_1_3.eContents().get(1);
		private final RuleCall cElemTypesTypeParserRuleCall_0_1_3_1_0 = (RuleCall)cElemTypesAssignment_0_1_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1_4 = (Keyword)cGroup_0_1.eContents().get(4);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cOptionTypeBaseAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword c_Keyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cNoneTypeBaseAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		
		//BasicType:
		//	(baseType=[TypeDecl] | "<" {TupleType} elemTypes+=Type ("*" elemTypes+=Type)+ ">") ("?" {OptionType.base=current} |
		//	"_" {NoneType.base=current})?;
		public ParserRule getRule() { return rule; }

		//(baseType=[TypeDecl] | "<" {TupleType} elemTypes+=Type ("*" elemTypes+=Type)+ ">") ("?" {OptionType.base=current} | "_"
		//{NoneType.base=current})?
		public Group getGroup() { return cGroup; }

		//baseType=[TypeDecl] | "<" {TupleType} elemTypes+=Type ("*" elemTypes+=Type)+ ">"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//baseType=[TypeDecl]
		public Assignment getBaseTypeAssignment_0_0() { return cBaseTypeAssignment_0_0; }

		//[TypeDecl]
		public CrossReference getBaseTypeTypeDeclCrossReference_0_0_0() { return cBaseTypeTypeDeclCrossReference_0_0_0; }

		//ID
		public RuleCall getBaseTypeTypeDeclIDTerminalRuleCall_0_0_0_1() { return cBaseTypeTypeDeclIDTerminalRuleCall_0_0_0_1; }

		//"<" {TupleType} elemTypes+=Type ("*" elemTypes+=Type)+ ">"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"<"
		public Keyword getLessThanSignKeyword_0_1_0() { return cLessThanSignKeyword_0_1_0; }

		//{TupleType}
		public Action getTupleTypeAction_0_1_1() { return cTupleTypeAction_0_1_1; }

		//elemTypes+=Type
		public Assignment getElemTypesAssignment_0_1_2() { return cElemTypesAssignment_0_1_2; }

		//Type
		public RuleCall getElemTypesTypeParserRuleCall_0_1_2_0() { return cElemTypesTypeParserRuleCall_0_1_2_0; }

		//("*" elemTypes+=Type)+
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }

		//"*"
		public Keyword getAsteriskKeyword_0_1_3_0() { return cAsteriskKeyword_0_1_3_0; }

		//elemTypes+=Type
		public Assignment getElemTypesAssignment_0_1_3_1() { return cElemTypesAssignment_0_1_3_1; }

		//Type
		public RuleCall getElemTypesTypeParserRuleCall_0_1_3_1_0() { return cElemTypesTypeParserRuleCall_0_1_3_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_1_4() { return cGreaterThanSignKeyword_0_1_4; }

		//("?" {OptionType.base=current} | "_" {NoneType.base=current})?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"?" {OptionType.base=current}
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0_0() { return cQuestionMarkKeyword_1_0_0; }

		//{OptionType.base=current}
		public Action getOptionTypeBaseAction_1_0_1() { return cOptionTypeBaseAction_1_0_1; }

		//"_" {NoneType.base=current}
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"_"
		public Keyword get_Keyword_1_1_0() { return c_Keyword_1_1_0; }

		//{NoneType.base=current}
		public Action getNoneTypeBaseAction_1_1_1() { return cNoneTypeBaseAction_1_1_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTupleLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSetLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOptionLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Literal:
		//	BasicLiteral | TupleLiteral | ListLiteral | SetLiteral | OptionLiteral;
		public ParserRule getRule() { return rule; }

		//BasicLiteral | TupleLiteral | ListLiteral | SetLiteral | OptionLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicLiteral
		public RuleCall getBasicLiteralParserRuleCall_0() { return cBasicLiteralParserRuleCall_0; }

		//TupleLiteral
		public RuleCall getTupleLiteralParserRuleCall_1() { return cTupleLiteralParserRuleCall_1; }

		//ListLiteral
		public RuleCall getListLiteralParserRuleCall_2() { return cListLiteralParserRuleCall_2; }

		//SetLiteral
		public RuleCall getSetLiteralParserRuleCall_3() { return cSetLiteralParserRuleCall_3; }

		//OptionLiteral
		public RuleCall getOptionLiteralParserRuleCall_4() { return cOptionLiteralParserRuleCall_4; }
	}

	public class BasicLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeConsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeConsTypeDeclCrossReference_0_0 = (CrossReference)cTypeConsAssignment_0.eContents().get(0);
		private final RuleCall cTypeConsTypeDeclIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeConsTypeDeclCrossReference_0_0.eContents().get(1);
		private final Assignment cLitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLitLITTerminalRuleCall_1_0 = (RuleCall)cLitAssignment_1.eContents().get(0);
		
		//BasicLiteral:
		//	typeCons=[TypeDecl] lit=LIT;
		public ParserRule getRule() { return rule; }

		//typeCons=[TypeDecl] lit=LIT
		public Group getGroup() { return cGroup; }

		//typeCons=[TypeDecl]
		public Assignment getTypeConsAssignment_0() { return cTypeConsAssignment_0; }

		//[TypeDecl]
		public CrossReference getTypeConsTypeDeclCrossReference_0_0() { return cTypeConsTypeDeclCrossReference_0_0; }

		//ID
		public RuleCall getTypeConsTypeDeclIDTerminalRuleCall_0_0_1() { return cTypeConsTypeDeclIDTerminalRuleCall_0_0_1; }

		//lit=LIT
		public Assignment getLitAssignment_1() { return cLitAssignment_1; }

		//LIT
		public RuleCall getLitLITTerminalRuleCall_1_0() { return cLitLITTerminalRuleCall_1_0; }
	}

	public class TupleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TupleLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTupleLiteralAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElemsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElemsLiteralParserRuleCall_2_0_0 = (RuleCall)cElemsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElemsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElemsLiteralParserRuleCall_2_1_1_0 = (RuleCall)cElemsAssignment_2_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TupleLiteral:
		//	"<" {TupleLiteral} (elems+=Literal ("," elems+=Literal)*)? ">";
		public ParserRule getRule() { return rule; }

		//"<" {TupleLiteral} (elems+=Literal ("," elems+=Literal)*)? ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//{TupleLiteral}
		public Action getTupleLiteralAction_1() { return cTupleLiteralAction_1; }

		//(elems+=Literal ("," elems+=Literal)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elems+=Literal
		public Assignment getElemsAssignment_2_0() { return cElemsAssignment_2_0; }

		//Literal
		public RuleCall getElemsLiteralParserRuleCall_2_0_0() { return cElemsLiteralParserRuleCall_2_0_0; }

		//("," elems+=Literal)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elems+=Literal
		public Assignment getElemsAssignment_2_1_1() { return cElemsAssignment_2_1_1; }

		//Literal
		public RuleCall getElemsLiteralParserRuleCall_2_1_1_0() { return cElemsLiteralParserRuleCall_2_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class ListLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBasicTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBasicTypeBasicTypeParserRuleCall_1_0 = (RuleCall)cBasicTypeAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElemsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElemsSimpleLiteralParserRuleCall_3_0_0 = (RuleCall)cElemsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElemsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElemsSimpleLiteralParserRuleCall_3_1_1_0 = (RuleCall)cElemsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListLiteral:
		//	"[" basicType=BasicType ":" (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? "]";
		public ParserRule getRule() { return rule; }

		//"[" basicType=BasicType ":" (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//basicType=BasicType
		public Assignment getBasicTypeAssignment_1() { return cBasicTypeAssignment_1; }

		//BasicType
		public RuleCall getBasicTypeBasicTypeParserRuleCall_1_0() { return cBasicTypeBasicTypeParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//(elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)?
		public Group getGroup_3() { return cGroup_3; }

		//elems+=SimpleLiteral
		public Assignment getElemsAssignment_3_0() { return cElemsAssignment_3_0; }

		//SimpleLiteral
		public RuleCall getElemsSimpleLiteralParserRuleCall_3_0_0() { return cElemsSimpleLiteralParserRuleCall_3_0_0; }

		//("," elems+=SimpleLiteral)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//elems+=SimpleLiteral
		public Assignment getElemsAssignment_3_1_1() { return cElemsAssignment_3_1_1; }

		//SimpleLiteral
		public RuleCall getElemsSimpleLiteralParserRuleCall_3_1_1_0() { return cElemsSimpleLiteralParserRuleCall_3_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class SetLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBasicTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBasicTypeBasicTypeParserRuleCall_1_0 = (RuleCall)cBasicTypeAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElemsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElemsSimpleLiteralParserRuleCall_3_0_0 = (RuleCall)cElemsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElemsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElemsSimpleLiteralParserRuleCall_3_1_1_0 = (RuleCall)cElemsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SetLiteral:
		//	"{" basicType=BasicType ":" (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? "}";
		public ParserRule getRule() { return rule; }

		//"{" basicType=BasicType ":" (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//basicType=BasicType
		public Assignment getBasicTypeAssignment_1() { return cBasicTypeAssignment_1; }

		//BasicType
		public RuleCall getBasicTypeBasicTypeParserRuleCall_1_0() { return cBasicTypeBasicTypeParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//(elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)?
		public Group getGroup_3() { return cGroup_3; }

		//elems+=SimpleLiteral
		public Assignment getElemsAssignment_3_0() { return cElemsAssignment_3_0; }

		//SimpleLiteral
		public RuleCall getElemsSimpleLiteralParserRuleCall_3_0_0() { return cElemsSimpleLiteralParserRuleCall_3_0_0; }

		//("," elems+=SimpleLiteral)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//elems+=SimpleLiteral
		public Assignment getElemsAssignment_3_1_1() { return cElemsAssignment_3_1_1; }

		//SimpleLiteral
		public RuleCall getElemsSimpleLiteralParserRuleCall_3_1_1_0() { return cElemsSimpleLiteralParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class OptionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNoneKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cNoneLiteralAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_0_3_0 = (RuleCall)cTypeAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSomeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cSomeLiteralAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cLitAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLitLiteralParserRuleCall_1_2_0 = (RuleCall)cLitAssignment_1_2.eContents().get(0);
		
		//OptionLiteral:
		//	"none" {NoneLiteral} ":" type=Type | "some" {SomeLiteral} lit=Literal;
		public ParserRule getRule() { return rule; }

		//"none" {NoneLiteral} ":" type=Type | "some" {SomeLiteral} lit=Literal
		public Alternatives getAlternatives() { return cAlternatives; }

		//"none" {NoneLiteral} ":" type=Type
		public Group getGroup_0() { return cGroup_0; }

		//"none"
		public Keyword getNoneKeyword_0_0() { return cNoneKeyword_0_0; }

		//{NoneLiteral}
		public Action getNoneLiteralAction_0_1() { return cNoneLiteralAction_0_1; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//type=Type
		public Assignment getTypeAssignment_0_3() { return cTypeAssignment_0_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_3_0() { return cTypeTypeParserRuleCall_0_3_0; }

		//"some" {SomeLiteral} lit=Literal
		public Group getGroup_1() { return cGroup_1; }

		//"some"
		public Keyword getSomeKeyword_1_0() { return cSomeKeyword_1_0; }

		//{SomeLiteral}
		public Action getSomeLiteralAction_1_1() { return cSomeLiteralAction_1_1; }

		//lit=Literal
		public Assignment getLitAssignment_1_2() { return cLitAssignment_1_2; }

		//Literal
		public RuleCall getLitLiteralParserRuleCall_1_2_0() { return cLitLiteralParserRuleCall_1_2_0; }
	}

	public class SimpleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleBasicLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleTupleLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleListLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSimpleSetLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSimpleOptionLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SimpleLiteral:
		//	SimpleBasicLiteral | SimpleTupleLiteral | SimpleListLiteral | SimpleSetLiteral | SimpleOptionLiteral;
		public ParserRule getRule() { return rule; }

		//SimpleBasicLiteral | SimpleTupleLiteral | SimpleListLiteral | SimpleSetLiteral | SimpleOptionLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleBasicLiteral
		public RuleCall getSimpleBasicLiteralParserRuleCall_0() { return cSimpleBasicLiteralParserRuleCall_0; }

		//SimpleTupleLiteral
		public RuleCall getSimpleTupleLiteralParserRuleCall_1() { return cSimpleTupleLiteralParserRuleCall_1; }

		//SimpleListLiteral
		public RuleCall getSimpleListLiteralParserRuleCall_2() { return cSimpleListLiteralParserRuleCall_2; }

		//SimpleSetLiteral
		public RuleCall getSimpleSetLiteralParserRuleCall_3() { return cSimpleSetLiteralParserRuleCall_3; }

		//SimpleOptionLiteral
		public RuleCall getSimpleOptionLiteralParserRuleCall_4() { return cSimpleOptionLiteralParserRuleCall_4; }
	}

	public class SimpleBasicLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleBasicLiteral");
		private final Assignment cLitAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLitLITTerminalRuleCall_0 = (RuleCall)cLitAssignment.eContents().get(0);
		
		//SimpleBasicLiteral:
		//	lit=LIT;
		public ParserRule getRule() { return rule; }

		//lit=LIT
		public Assignment getLitAssignment() { return cLitAssignment; }

		//LIT
		public RuleCall getLitLITTerminalRuleCall_0() { return cLitLITTerminalRuleCall_0; }
	}

	public class SimpleTupleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleTupleLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cSimpleTupleLiteralAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElemsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElemsSimpleLiteralParserRuleCall_2_0_0 = (RuleCall)cElemsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElemsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElemsSimpleLiteralParserRuleCall_2_1_1_0 = (RuleCall)cElemsAssignment_2_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimpleTupleLiteral:
		//	"<" {SimpleTupleLiteral} (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? ">";
		public ParserRule getRule() { return rule; }

		//"<" {SimpleTupleLiteral} (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//{SimpleTupleLiteral}
		public Action getSimpleTupleLiteralAction_1() { return cSimpleTupleLiteralAction_1; }

		//(elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elems+=SimpleLiteral
		public Assignment getElemsAssignment_2_0() { return cElemsAssignment_2_0; }

		//SimpleLiteral
		public RuleCall getElemsSimpleLiteralParserRuleCall_2_0_0() { return cElemsSimpleLiteralParserRuleCall_2_0_0; }

		//("," elems+=SimpleLiteral)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elems+=SimpleLiteral
		public Assignment getElemsAssignment_2_1_1() { return cElemsAssignment_2_1_1; }

		//SimpleLiteral
		public RuleCall getElemsSimpleLiteralParserRuleCall_2_1_1_0() { return cElemsSimpleLiteralParserRuleCall_2_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class SimpleOptionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleOptionLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNoneKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cSimpleNoneLiteralAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSomeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cSimpleSomeLiteralAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cLitAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLitSimpleLiteralParserRuleCall_1_2_0 = (RuleCall)cLitAssignment_1_2.eContents().get(0);
		
		//SimpleOptionLiteral:
		//	"none" {SimpleNoneLiteral} | "some" {SimpleSomeLiteral} lit=SimpleLiteral;
		public ParserRule getRule() { return rule; }

		//"none" {SimpleNoneLiteral} | "some" {SimpleSomeLiteral} lit=SimpleLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//"none" {SimpleNoneLiteral}
		public Group getGroup_0() { return cGroup_0; }

		//"none"
		public Keyword getNoneKeyword_0_0() { return cNoneKeyword_0_0; }

		//{SimpleNoneLiteral}
		public Action getSimpleNoneLiteralAction_0_1() { return cSimpleNoneLiteralAction_0_1; }

		//"some" {SimpleSomeLiteral} lit=SimpleLiteral
		public Group getGroup_1() { return cGroup_1; }

		//"some"
		public Keyword getSomeKeyword_1_0() { return cSomeKeyword_1_0; }

		//{SimpleSomeLiteral}
		public Action getSimpleSomeLiteralAction_1_1() { return cSimpleSomeLiteralAction_1_1; }

		//lit=SimpleLiteral
		public Assignment getLitAssignment_1_2() { return cLitAssignment_1_2; }

		//SimpleLiteral
		public RuleCall getLitSimpleLiteralParserRuleCall_1_2_0() { return cLitSimpleLiteralParserRuleCall_1_2_0; }
	}

	public class SimpleListLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleListLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cSimpleListLiteralAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElemsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElemsSimpleLiteralParserRuleCall_2_0_0 = (RuleCall)cElemsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElemsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElemsSimpleLiteralParserRuleCall_2_1_1_0 = (RuleCall)cElemsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimpleListLiteral:
		//	"[" {SimpleListLiteral} (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? "]";
		public ParserRule getRule() { return rule; }

		//"[" {SimpleListLiteral} (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//{SimpleListLiteral}
		public Action getSimpleListLiteralAction_1() { return cSimpleListLiteralAction_1; }

		//(elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elems+=SimpleLiteral
		public Assignment getElemsAssignment_2_0() { return cElemsAssignment_2_0; }

		//SimpleLiteral
		public RuleCall getElemsSimpleLiteralParserRuleCall_2_0_0() { return cElemsSimpleLiteralParserRuleCall_2_0_0; }

		//("," elems+=SimpleLiteral)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elems+=SimpleLiteral
		public Assignment getElemsAssignment_2_1_1() { return cElemsAssignment_2_1_1; }

		//SimpleLiteral
		public RuleCall getElemsSimpleLiteralParserRuleCall_2_1_1_0() { return cElemsSimpleLiteralParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class SimpleSetLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleSetLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cSimpleSetLiteralAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElemsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElemsSimpleLiteralParserRuleCall_2_0_0 = (RuleCall)cElemsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElemsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElemsSimpleLiteralParserRuleCall_2_1_1_0 = (RuleCall)cElemsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimpleSetLiteral:
		//	"{" {SimpleSetLiteral} (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? "}";
		public ParserRule getRule() { return rule; }

		//"{" {SimpleSetLiteral} (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//{SimpleSetLiteral}
		public Action getSimpleSetLiteralAction_1() { return cSimpleSetLiteralAction_1; }

		//(elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elems+=SimpleLiteral
		public Assignment getElemsAssignment_2_0() { return cElemsAssignment_2_0; }

		//SimpleLiteral
		public RuleCall getElemsSimpleLiteralParserRuleCall_2_0_0() { return cElemsSimpleLiteralParserRuleCall_2_0_0; }

		//("," elems+=SimpleLiteral)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elems+=SimpleLiteral
		public Assignment getElemsAssignment_2_1_1() { return cElemsAssignment_2_1_1; }

		//SimpleLiteral
		public RuleCall getElemsSimpleLiteralParserRuleCall_2_1_1_0() { return cElemsSimpleLiteralParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	private ModelElements pModel;
	private DeclElements pDecl;
	private TypeDeclElements pTypeDecl;
	private ComponentDeclElements pComponentDecl;
	private MemberDeclElements pMemberDecl;
	private AttrDeclElements pAttrDecl;
	private ModifierElements pModifier;
	private SubMemberDeclElements pSubMemberDecl;
	private InvariantDeclElements pInvariantDecl;
	private MultiplicityInvariantDeclElements pMultiplicityInvariantDecl;
	private SubMemberMatchElements pSubMemberMatch;
	private ConstraintNatElements pConstraintNat;
	private AppOrComponentElements pAppOrComponent;
	private AppRequirementElements pAppRequirement;
	private DeviceElements pDevice;
	private TypeElements pType;
	private BasicTypeElements pBasicType;
	private LiteralElements pLiteral;
	private BasicLiteralElements pBasicLiteral;
	private TupleLiteralElements pTupleLiteral;
	private ListLiteralElements pListLiteral;
	private SetLiteralElements pSetLiteral;
	private OptionLiteralElements pOptionLiteral;
	private SimpleLiteralElements pSimpleLiteral;
	private SimpleBasicLiteralElements pSimpleBasicLiteral;
	private SimpleTupleLiteralElements pSimpleTupleLiteral;
	private SimpleOptionLiteralElements pSimpleOptionLiteral;
	private SimpleListLiteralElements pSimpleListLiteral;
	private SimpleSetLiteralElements pSimpleSetLiteral;
	private TerminalRule tID;
	private TerminalRule tLIT;
	private TerminalRule tNAT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public DeviceModelingLanguageGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.ksu.cis.projects.mdcf.devicemodel.DeviceModelingLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	decls+=Decl*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Decl:
	//	TypeDecl | ComponentDecl | AppRequirement;
	public DeclElements getDeclAccess() {
		return (pDecl != null) ? pDecl : (pDecl = new DeclElements());
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}

	//TypeDecl:
	//	"type" name=ID;
	public TypeDeclElements getTypeDeclAccess() {
		return (pTypeDecl != null) ? pTypeDecl : (pTypeDecl = new TypeDeclElements());
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}

	//ComponentDecl:
	//	("component" {Component} | "instance" {Instance}) name=ID ("extends" supers+=[ComponentDecl] ("with"
	//	supers+=[ComponentDecl])*)? ("{" members+=MemberDecl* "}")?;
	public ComponentDeclElements getComponentDeclAccess() {
		return (pComponentDecl != null) ? pComponentDecl : (pComponentDecl = new ComponentDeclElements());
	}
	
	public ParserRule getComponentDeclRule() {
		return getComponentDeclAccess().getRule();
	}

	//MemberDecl:
	//	AttrDecl | SubMemberDecl | InvariantDecl;
	public MemberDeclElements getMemberDeclAccess() {
		return (pMemberDecl != null) ? pMemberDecl : (pMemberDecl = new MemberDeclElements());
	}
	
	public ParserRule getMemberDeclRule() {
		return getMemberDeclAccess().getRule();
	}

	//AttrDecl:
	//	modifier=Modifier attributeName=ID (":" type=Type ("=" literal=Literal)? | "=" literal=Literal);
	public AttrDeclElements getAttrDeclAccess() {
		return (pAttrDecl != null) ? pAttrDecl : (pAttrDecl = new AttrDeclElements());
	}
	
	public ParserRule getAttrDeclRule() {
		return getAttrDeclAccess().getRule();
	}

	//Modifier:
	//	"const" | "val" | "var" | "def";
	public ModifierElements getModifierAccess() {
		return (pModifier != null) ? pModifier : (pModifier = new ModifierElements());
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//SubMemberDecl:
	//	{SubMemberDecl} name=ID (":" supers+=[ComponentDecl] ("with" supers+=[ComponentDecl])* ("{" members+=MemberDecl* "}")?
	//	| "{" members+=MemberDecl* "}");
	public SubMemberDeclElements getSubMemberDeclAccess() {
		return (pSubMemberDecl != null) ? pSubMemberDecl : (pSubMemberDecl = new SubMemberDeclElements());
	}
	
	public ParserRule getSubMemberDeclRule() {
		return getSubMemberDeclAccess().getRule();
	}

	//InvariantDecl:
	//	MultiplicityInvariantDecl;
	public InvariantDeclElements getInvariantDeclAccess() {
		return (pInvariantDecl != null) ? pInvariantDecl : (pInvariantDecl = new InvariantDeclElements());
	}
	
	public ParserRule getInvariantDeclRule() {
		return getInvariantDeclAccess().getRule();
	}

	//MultiplicityInvariantDecl:
	//	"inv" (invName=ID ":")? (lo=ConstraintNat ".." hi=ConstraintNat) match=SubMemberMatch (":" type=[ComponentDecl])?;
	public MultiplicityInvariantDeclElements getMultiplicityInvariantDeclAccess() {
		return (pMultiplicityInvariantDecl != null) ? pMultiplicityInvariantDecl : (pMultiplicityInvariantDecl = new MultiplicityInvariantDeclElements());
	}
	
	public ParserRule getMultiplicityInvariantDeclRule() {
		return getMultiplicityInvariantDeclAccess().getRule();
	}

	//SubMemberMatch:
	//	{SubMemberMatch} (qNames+=ID ".")* (name=ID | any="*");
	public SubMemberMatchElements getSubMemberMatchAccess() {
		return (pSubMemberMatch != null) ? pSubMemberMatch : (pSubMemberMatch = new SubMemberMatchElements());
	}
	
	public ParserRule getSubMemberMatchRule() {
		return getSubMemberMatchAccess().getRule();
	}

	//ConstraintNat:
	//	{NumNatConstraint} num=NAT | {AnyNatConstraint} "*";
	public ConstraintNatElements getConstraintNatAccess() {
		return (pConstraintNat != null) ? pConstraintNat : (pConstraintNat = new ConstraintNatElements());
	}
	
	public ParserRule getConstraintNatRule() {
		return getConstraintNatAccess().getRule();
	}

	//AppOrComponent:
	//	ComponentDecl | AppRequirement;
	public AppOrComponentElements getAppOrComponentAccess() {
		return (pAppOrComponent != null) ? pAppOrComponent : (pAppOrComponent = new AppOrComponentElements());
	}
	
	public ParserRule getAppOrComponentRule() {
		return getAppOrComponentAccess().getRule();
	}

	//AppRequirement:
	//	"app" name=ID "requires" devices+=Device* ("extends" supers+=[ComponentDecl] ("with" supers+=[ComponentDecl])* ("{"
	//	members+=MemberDecl* "}")? | "{" members+=MemberDecl* "}");
	public AppRequirementElements getAppRequirementAccess() {
		return (pAppRequirement != null) ? pAppRequirement : (pAppRequirement = new AppRequirementElements());
	}
	
	public ParserRule getAppRequirementRule() {
		return getAppRequirementAccess().getRule();
	}

	//Device:
	//	name=ID ":" type=[AppOrComponent];
	public DeviceElements getDeviceAccess() {
		return (pDevice != null) ? pDevice : (pDevice = new DeviceElements());
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}

	//Type:
	//	BasicType (({ListType.base=current} "[" "]" | {SetType.base=current} "{" "}")+ ("?" {OptionType.base=current} | "!"
	//	{SomeType.base=current} | "_" {NoneType.base=current})?)?;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//BasicType:
	//	(baseType=[TypeDecl] | "<" {TupleType} elemTypes+=Type ("*" elemTypes+=Type)+ ">") ("?" {OptionType.base=current} |
	//	"_" {NoneType.base=current})?;
	public BasicTypeElements getBasicTypeAccess() {
		return (pBasicType != null) ? pBasicType : (pBasicType = new BasicTypeElements());
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	//Literal:
	//	BasicLiteral | TupleLiteral | ListLiteral | SetLiteral | OptionLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BasicLiteral:
	//	typeCons=[TypeDecl] lit=LIT;
	public BasicLiteralElements getBasicLiteralAccess() {
		return (pBasicLiteral != null) ? pBasicLiteral : (pBasicLiteral = new BasicLiteralElements());
	}
	
	public ParserRule getBasicLiteralRule() {
		return getBasicLiteralAccess().getRule();
	}

	//TupleLiteral:
	//	"<" {TupleLiteral} (elems+=Literal ("," elems+=Literal)*)? ">";
	public TupleLiteralElements getTupleLiteralAccess() {
		return (pTupleLiteral != null) ? pTupleLiteral : (pTupleLiteral = new TupleLiteralElements());
	}
	
	public ParserRule getTupleLiteralRule() {
		return getTupleLiteralAccess().getRule();
	}

	//ListLiteral:
	//	"[" basicType=BasicType ":" (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? "]";
	public ListLiteralElements getListLiteralAccess() {
		return (pListLiteral != null) ? pListLiteral : (pListLiteral = new ListLiteralElements());
	}
	
	public ParserRule getListLiteralRule() {
		return getListLiteralAccess().getRule();
	}

	//SetLiteral:
	//	"{" basicType=BasicType ":" (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? "}";
	public SetLiteralElements getSetLiteralAccess() {
		return (pSetLiteral != null) ? pSetLiteral : (pSetLiteral = new SetLiteralElements());
	}
	
	public ParserRule getSetLiteralRule() {
		return getSetLiteralAccess().getRule();
	}

	//OptionLiteral:
	//	"none" {NoneLiteral} ":" type=Type | "some" {SomeLiteral} lit=Literal;
	public OptionLiteralElements getOptionLiteralAccess() {
		return (pOptionLiteral != null) ? pOptionLiteral : (pOptionLiteral = new OptionLiteralElements());
	}
	
	public ParserRule getOptionLiteralRule() {
		return getOptionLiteralAccess().getRule();
	}

	//SimpleLiteral:
	//	SimpleBasicLiteral | SimpleTupleLiteral | SimpleListLiteral | SimpleSetLiteral | SimpleOptionLiteral;
	public SimpleLiteralElements getSimpleLiteralAccess() {
		return (pSimpleLiteral != null) ? pSimpleLiteral : (pSimpleLiteral = new SimpleLiteralElements());
	}
	
	public ParserRule getSimpleLiteralRule() {
		return getSimpleLiteralAccess().getRule();
	}

	//SimpleBasicLiteral:
	//	lit=LIT;
	public SimpleBasicLiteralElements getSimpleBasicLiteralAccess() {
		return (pSimpleBasicLiteral != null) ? pSimpleBasicLiteral : (pSimpleBasicLiteral = new SimpleBasicLiteralElements());
	}
	
	public ParserRule getSimpleBasicLiteralRule() {
		return getSimpleBasicLiteralAccess().getRule();
	}

	//SimpleTupleLiteral:
	//	"<" {SimpleTupleLiteral} (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? ">";
	public SimpleTupleLiteralElements getSimpleTupleLiteralAccess() {
		return (pSimpleTupleLiteral != null) ? pSimpleTupleLiteral : (pSimpleTupleLiteral = new SimpleTupleLiteralElements());
	}
	
	public ParserRule getSimpleTupleLiteralRule() {
		return getSimpleTupleLiteralAccess().getRule();
	}

	//SimpleOptionLiteral:
	//	"none" {SimpleNoneLiteral} | "some" {SimpleSomeLiteral} lit=SimpleLiteral;
	public SimpleOptionLiteralElements getSimpleOptionLiteralAccess() {
		return (pSimpleOptionLiteral != null) ? pSimpleOptionLiteral : (pSimpleOptionLiteral = new SimpleOptionLiteralElements());
	}
	
	public ParserRule getSimpleOptionLiteralRule() {
		return getSimpleOptionLiteralAccess().getRule();
	}

	//SimpleListLiteral:
	//	"[" {SimpleListLiteral} (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? "]";
	public SimpleListLiteralElements getSimpleListLiteralAccess() {
		return (pSimpleListLiteral != null) ? pSimpleListLiteral : (pSimpleListLiteral = new SimpleListLiteralElements());
	}
	
	public ParserRule getSimpleListLiteralRule() {
		return getSimpleListLiteralAccess().getRule();
	}

	//SimpleSetLiteral:
	//	"{" {SimpleSetLiteral} (elems+=SimpleLiteral ("," elems+=SimpleLiteral)*)? "}";
	public SimpleSetLiteralElements getSimpleSetLiteralAccess() {
		return (pSimpleSetLiteral != null) ? pSimpleSetLiteral : (pSimpleSetLiteral = new SimpleSetLiteralElements());
	}
	
	public ParserRule getSimpleSetLiteralRule() {
		return getSimpleSetLiteralAccess().getRule();
	}

	////TypeDecl:            'type' name=ID;
	////                       ( 'include' supers+=[TypeDecl|ID] ( ',' supers+=[TypeDecl|ID] )* )?
	////                       ( '{' ( elems+=LIT ( ',' elems+=LIT )* )? '}' )?;
	////FeaturesDecl:        (complete='complete')? 'features' name=ID
	////                       ( 'include' supers+=[FeaturesDecl|ID] ( ',' supers+=[FeaturesDecl|ID] )* )?  
	////                       body=FeaturesBody;
	////
	////FeaturesBody:        {FeaturesBody} ( '{' features += FeatureDecl* '}' )?;
	////
	////FeatureDecl:         SubFeaturesDecl | InvariantDecl | AttrDecl;
	////
	////
	////SubFeaturesDecl:     ( qNames+=ID '.' )* name=ID type=SubFeaturesType;
	////
	////SubFeaturesType:       ':' {SubGroupTypeRef}  type=[FeaturesDecl|ID] 
	////                     | {SubGroupTypeAnon} 
	////                       ( 'include' supers+=[FeaturesDecl|ID] 
	////                            ( ',' supers+=[FeaturesDecl|ID] )*
	////                       )? 
	////                       '=' body=FeaturesBody;
	////
	////InvariantDecl:       MultiplicityInvariantDecl;
	////
	////MultiplicityInvariantDecl: 
	////                     'inv' ( invName=ID ':' )? ( lo=ConstraintNat '..' hi=ConstraintNat ) 
	////                       match=SubFeaturesMatch 
	////                       ( ':' type=[FeaturesDecl|ID] )?;
	////
	////SubFeaturesMatch:    {SubFeaturesMatch} ( distinct='distinct' )? 
	////                       ( qNames+=ID '.' )* ( name=ID | any='*' );
	////
	////ConstraintNat:       {NumNatConstraint} num=NAT | {AnyNatConstraint} '*' ;                       
	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal LIT:
	//	"("->")";
	public TerminalRule getLITRule() {
		return (tLIT != null) ? tLIT : (tLIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LIT"));
	} 

	//terminal NAT:
	//	"0" | "1".."9" "0".."9"*;
	public TerminalRule getNATRule() {
		return (tNAT != null) ? tNAT : (tNAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NAT"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
