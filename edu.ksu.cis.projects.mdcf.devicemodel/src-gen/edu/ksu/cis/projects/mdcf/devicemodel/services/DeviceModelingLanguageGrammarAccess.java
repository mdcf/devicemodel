/*
* generated by Xtext
*/

package edu.ksu.cis.projects.mdcf.devicemodel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class DeviceModelingLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cDeclsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclsDeclParserRuleCall_0 = (RuleCall)cDeclsAssignment.eContents().get(0);
		
		//Model:
		//	decls+=Decl*;
		public ParserRule getRule() { return rule; }

		//decls+=Decl*
		public Assignment getDeclsAssignment() { return cDeclsAssignment; }

		//Decl
		public RuleCall getDeclsDeclParserRuleCall_0() { return cDeclsDeclParserRuleCall_0; }
	}

	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTypeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cTypeDeclAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFeaturegroupKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cFeatureGroupDeclAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cLessThanSignColonKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cSupersAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final CrossReference cSupersFeatureGroupDeclCrossReference_1_3_1_0 = (CrossReference)cSupersAssignment_1_3_1.eContents().get(0);
		private final RuleCall cSupersFeatureGroupDeclIDTerminalRuleCall_1_3_1_0_1 = (RuleCall)cSupersFeatureGroupDeclCrossReference_1_3_1_0.eContents().get(1);
		private final Group cGroup_1_3_2 = (Group)cGroup_1_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_3_2_0 = (Keyword)cGroup_1_3_2.eContents().get(0);
		private final Assignment cSupersAssignment_1_3_2_1 = (Assignment)cGroup_1_3_2.eContents().get(1);
		private final CrossReference cSupersFeatureGroupDeclCrossReference_1_3_2_1_0 = (CrossReference)cSupersAssignment_1_3_2_1.eContents().get(0);
		private final RuleCall cSupersFeatureGroupDeclIDTerminalRuleCall_1_3_2_1_0_1 = (RuleCall)cSupersFeatureGroupDeclCrossReference_1_3_2_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cBodyFeatureGroupBodyParserRuleCall_1_4_0 = (RuleCall)cBodyAssignment_1_4.eContents().get(0);
		
		//Decl:
		//	"type" {TypeDecl} name=ID | "featuregroup" {FeatureGroupDecl} name=ID ("<:" supers+=[FeatureGroupDecl] (","
		//	supers+=[FeatureGroupDecl])*)? body=FeatureGroupBody;
		public ParserRule getRule() { return rule; }

		//"type" {TypeDecl} name=ID | "featuregroup" {FeatureGroupDecl} name=ID ("<:" supers+=[FeatureGroupDecl] (","
		//supers+=[FeatureGroupDecl])*)? body=FeatureGroupBody
		public Alternatives getAlternatives() { return cAlternatives; }

		//"type" {TypeDecl} name=ID
		public Group getGroup_0() { return cGroup_0; }

		//"type"
		public Keyword getTypeKeyword_0_0() { return cTypeKeyword_0_0; }

		//{TypeDecl}
		public Action getTypeDeclAction_0_1() { return cTypeDeclAction_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//"featuregroup" {FeatureGroupDecl} name=ID ("<:" supers+=[FeatureGroupDecl] ("," supers+=[FeatureGroupDecl])*)?
		//body=FeatureGroupBody
		public Group getGroup_1() { return cGroup_1; }

		//"featuregroup"
		public Keyword getFeaturegroupKeyword_1_0() { return cFeaturegroupKeyword_1_0; }

		//{FeatureGroupDecl}
		public Action getFeatureGroupDeclAction_1_1() { return cFeatureGroupDeclAction_1_1; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }

		//("<:" supers+=[FeatureGroupDecl] ("," supers+=[FeatureGroupDecl])*)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"<:"
		public Keyword getLessThanSignColonKeyword_1_3_0() { return cLessThanSignColonKeyword_1_3_0; }

		//supers+=[FeatureGroupDecl]
		public Assignment getSupersAssignment_1_3_1() { return cSupersAssignment_1_3_1; }

		//[FeatureGroupDecl]
		public CrossReference getSupersFeatureGroupDeclCrossReference_1_3_1_0() { return cSupersFeatureGroupDeclCrossReference_1_3_1_0; }

		//ID
		public RuleCall getSupersFeatureGroupDeclIDTerminalRuleCall_1_3_1_0_1() { return cSupersFeatureGroupDeclIDTerminalRuleCall_1_3_1_0_1; }

		//("," supers+=[FeatureGroupDecl])*
		public Group getGroup_1_3_2() { return cGroup_1_3_2; }

		//","
		public Keyword getCommaKeyword_1_3_2_0() { return cCommaKeyword_1_3_2_0; }

		//supers+=[FeatureGroupDecl]
		public Assignment getSupersAssignment_1_3_2_1() { return cSupersAssignment_1_3_2_1; }

		//[FeatureGroupDecl]
		public CrossReference getSupersFeatureGroupDeclCrossReference_1_3_2_1_0() { return cSupersFeatureGroupDeclCrossReference_1_3_2_1_0; }

		//ID
		public RuleCall getSupersFeatureGroupDeclIDTerminalRuleCall_1_3_2_1_0_1() { return cSupersFeatureGroupDeclIDTerminalRuleCall_1_3_2_1_0_1; }

		//body=FeatureGroupBody
		public Assignment getBodyAssignment_1_4() { return cBodyAssignment_1_4; }

		//FeatureGroupBody
		public RuleCall getBodyFeatureGroupBodyParserRuleCall_1_4_0() { return cBodyFeatureGroupBodyParserRuleCall_1_4_0; }
	}

	public class FeatureGroupBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureGroupBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFeatureGroupBodyAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cGroupElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGroupElementsGroupElementDeclParserRuleCall_2_0 = (RuleCall)cGroupElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FeatureGroupBody:
		//	"{" {FeatureGroupBody} groupElements+=GroupElementDecl* "}";
		public ParserRule getRule() { return rule; }

		//"{" {FeatureGroupBody} groupElements+=GroupElementDecl* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//{FeatureGroupBody}
		public Action getFeatureGroupBodyAction_1() { return cFeatureGroupBodyAction_1; }

		//groupElements+=GroupElementDecl*
		public Assignment getGroupElementsAssignment_2() { return cGroupElementsAssignment_2; }

		//GroupElementDecl
		public RuleCall getGroupElementsGroupElementDeclParserRuleCall_2_0() { return cGroupElementsGroupElementDeclParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class GroupElementDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupElementDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGroupAttrDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubGroupDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GroupElementDecl:
		//	GroupAttrDecl | SubGroupDecl;
		public ParserRule getRule() { return rule; }

		//GroupAttrDecl | SubGroupDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//GroupAttrDecl
		public RuleCall getGroupAttrDeclParserRuleCall_0() { return cGroupAttrDeclParserRuleCall_0; }

		//SubGroupDecl
		public RuleCall getSubGroupDeclParserRuleCall_1() { return cSubGroupDeclParserRuleCall_1; }
	}

	public class GroupAttrDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupAttrDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierModifierParserRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cAttributeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeNameIDTerminalRuleCall_1_0 = (RuleCall)cAttributeNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cAttributeTypeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cAttributeTypeTypeParserRuleCall_2_0_1_0 = (RuleCall)cAttributeTypeAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAttributeLiteralAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAttributeLiteralLiteralParserRuleCall_2_1_1_0 = (RuleCall)cAttributeLiteralAssignment_2_1_1.eContents().get(0);
		
		//GroupAttrDecl:
		//	modifier=Modifier attributeName=ID (":" attributeType=Type | "=" attributeLiteral=Literal);
		public ParserRule getRule() { return rule; }

		//modifier=Modifier attributeName=ID (":" attributeType=Type | "=" attributeLiteral=Literal)
		public Group getGroup() { return cGroup; }

		//modifier=Modifier
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//Modifier
		public RuleCall getModifierModifierParserRuleCall_0_0() { return cModifierModifierParserRuleCall_0_0; }

		//attributeName=ID
		public Assignment getAttributeNameAssignment_1() { return cAttributeNameAssignment_1; }

		//ID
		public RuleCall getAttributeNameIDTerminalRuleCall_1_0() { return cAttributeNameIDTerminalRuleCall_1_0; }

		//":" attributeType=Type | "=" attributeLiteral=Literal
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//":" attributeType=Type
		public Group getGroup_2_0() { return cGroup_2_0; }

		//":"
		public Keyword getColonKeyword_2_0_0() { return cColonKeyword_2_0_0; }

		//attributeType=Type
		public Assignment getAttributeTypeAssignment_2_0_1() { return cAttributeTypeAssignment_2_0_1; }

		//Type
		public RuleCall getAttributeTypeTypeParserRuleCall_2_0_1_0() { return cAttributeTypeTypeParserRuleCall_2_0_1_0; }

		//"=" attributeLiteral=Literal
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_0() { return cEqualsSignKeyword_2_1_0; }

		//attributeLiteral=Literal
		public Assignment getAttributeLiteralAssignment_2_1_1() { return cAttributeLiteralAssignment_2_1_1; }

		//Literal
		public RuleCall getAttributeLiteralLiteralParserRuleCall_2_1_1_0() { return cAttributeLiteralLiteralParserRuleCall_2_1_1_0; }
	}

	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cValKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVarKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDefKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Modifier:
		//	"const" | "val" | "var" | "def";
		public ParserRule getRule() { return rule; }

		//"const" | "val" | "var" | "def"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//"val"
		public Keyword getValKeyword_1() { return cValKeyword_1; }

		//"var"
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }

		//"def"
		public Keyword getDefKeyword_3() { return cDefKeyword_3; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBasicTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cBaseTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cBaseTypeTypeDeclCrossReference_0_1_0 = (CrossReference)cBaseTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cBaseTypeTypeDeclIDTerminalRuleCall_0_1_0_1 = (RuleCall)cBaseTypeTypeDeclCrossReference_0_1_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Group cGroup_0_2_0 = (Group)cAlternatives_0_2.eContents().get(0);
		private final Action cListTypeBaseAction_0_2_0_0 = (Action)cGroup_0_2_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_2_0_1 = (Keyword)cGroup_0_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_2_0_2 = (Keyword)cGroup_0_2_0.eContents().get(2);
		private final Group cGroup_0_2_1 = (Group)cAlternatives_0_2.eContents().get(1);
		private final Action cSetTypeBaseAction_0_2_1_0 = (Action)cGroup_0_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2_1_1 = (Keyword)cGroup_0_2_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_2_1_2 = (Keyword)cGroup_0_2_1.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cTupleTypeAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cElemTypesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElemTypesTypeParserRuleCall_1_2_0 = (RuleCall)cElemTypesAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cAsteriskKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cElemTypesAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cElemTypesTypeParserRuleCall_1_3_1_0 = (RuleCall)cElemTypesAssignment_1_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Type:
		//	{BasicType} baseType=[TypeDecl] ({ListType.base=current} "[" "]" | {SetType.base=current} "{" "}")* | "<" {TupleType}
		//	elemTypes+=Type ("*" elemTypes+=Type)+ ">";
		public ParserRule getRule() { return rule; }

		//{BasicType} baseType=[TypeDecl] ({ListType.base=current} "[" "]" | {SetType.base=current} "{" "}")* | "<" {TupleType}
		//elemTypes+=Type ("*" elemTypes+=Type)+ ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BasicType} baseType=[TypeDecl] ({ListType.base=current} "[" "]" | {SetType.base=current} "{" "}")*
		public Group getGroup_0() { return cGroup_0; }

		//{BasicType}
		public Action getBasicTypeAction_0_0() { return cBasicTypeAction_0_0; }

		//baseType=[TypeDecl]
		public Assignment getBaseTypeAssignment_0_1() { return cBaseTypeAssignment_0_1; }

		//[TypeDecl]
		public CrossReference getBaseTypeTypeDeclCrossReference_0_1_0() { return cBaseTypeTypeDeclCrossReference_0_1_0; }

		//ID
		public RuleCall getBaseTypeTypeDeclIDTerminalRuleCall_0_1_0_1() { return cBaseTypeTypeDeclIDTerminalRuleCall_0_1_0_1; }

		//({ListType.base=current} "[" "]" | {SetType.base=current} "{" "}")*
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }

		//{ListType.base=current} "[" "]"
		public Group getGroup_0_2_0() { return cGroup_0_2_0; }

		//{ListType.base=current}
		public Action getListTypeBaseAction_0_2_0_0() { return cListTypeBaseAction_0_2_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_2_0_1() { return cLeftSquareBracketKeyword_0_2_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_2_0_2() { return cRightSquareBracketKeyword_0_2_0_2; }

		//{SetType.base=current} "{" "}"
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }

		//{SetType.base=current}
		public Action getSetTypeBaseAction_0_2_1_0() { return cSetTypeBaseAction_0_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_2_1_1() { return cLeftCurlyBracketKeyword_0_2_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_2_1_2() { return cRightCurlyBracketKeyword_0_2_1_2; }

		//"<" {TupleType} elemTypes+=Type ("*" elemTypes+=Type)+ ">"
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//{TupleType}
		public Action getTupleTypeAction_1_1() { return cTupleTypeAction_1_1; }

		//elemTypes+=Type
		public Assignment getElemTypesAssignment_1_2() { return cElemTypesAssignment_1_2; }

		//Type
		public RuleCall getElemTypesTypeParserRuleCall_1_2_0() { return cElemTypesTypeParserRuleCall_1_2_0; }

		//("*" elemTypes+=Type)+
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"*"
		public Keyword getAsteriskKeyword_1_3_0() { return cAsteriskKeyword_1_3_0; }

		//elemTypes+=Type
		public Assignment getElemTypesAssignment_1_3_1() { return cElemTypesAssignment_1_3_1; }

		//Type
		public RuleCall getElemTypesTypeParserRuleCall_1_3_1_0() { return cElemTypesTypeParserRuleCall_1_3_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_4() { return cGreaterThanSignKeyword_1_4; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTupleLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSetLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal:
		//	BasicLiteral | TupleLiteral | ListLiteral | SetLiteral;
		public ParserRule getRule() { return rule; }

		//BasicLiteral | TupleLiteral | ListLiteral | SetLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicLiteral
		public RuleCall getBasicLiteralParserRuleCall_0() { return cBasicLiteralParserRuleCall_0; }

		//TupleLiteral
		public RuleCall getTupleLiteralParserRuleCall_1() { return cTupleLiteralParserRuleCall_1; }

		//ListLiteral
		public RuleCall getListLiteralParserRuleCall_2() { return cListLiteralParserRuleCall_2; }

		//SetLiteral
		public RuleCall getSetLiteralParserRuleCall_3() { return cSetLiteralParserRuleCall_3; }
	}

	public class BasicLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeConsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeConsTypeDeclCrossReference_0_0 = (CrossReference)cTypeConsAssignment_0.eContents().get(0);
		private final RuleCall cTypeConsTypeDeclIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeConsTypeDeclCrossReference_0_0.eContents().get(1);
		private final Assignment cLitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLitLITTerminalRuleCall_1_0 = (RuleCall)cLitAssignment_1.eContents().get(0);
		
		//BasicLiteral:
		//	typeCons=[TypeDecl] lit=LIT;
		public ParserRule getRule() { return rule; }

		//typeCons=[TypeDecl] lit=LIT
		public Group getGroup() { return cGroup; }

		//typeCons=[TypeDecl]
		public Assignment getTypeConsAssignment_0() { return cTypeConsAssignment_0; }

		//[TypeDecl]
		public CrossReference getTypeConsTypeDeclCrossReference_0_0() { return cTypeConsTypeDeclCrossReference_0_0; }

		//ID
		public RuleCall getTypeConsTypeDeclIDTerminalRuleCall_0_0_1() { return cTypeConsTypeDeclIDTerminalRuleCall_0_0_1; }

		//lit=LIT
		public Assignment getLitAssignment_1() { return cLitAssignment_1; }

		//LIT
		public RuleCall getLitLITTerminalRuleCall_1_0() { return cLitLITTerminalRuleCall_1_0; }
	}

	public class TupleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TupleLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTupleLiteralAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElemsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElemsLiteralParserRuleCall_2_0_0 = (RuleCall)cElemsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElemsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElemsLiteralParserRuleCall_2_1_1_0 = (RuleCall)cElemsAssignment_2_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TupleLiteral:
		//	"<" {TupleLiteral} (elems+=Literal ("," elems+=Literal)*)? ">";
		public ParserRule getRule() { return rule; }

		//"<" {TupleLiteral} (elems+=Literal ("," elems+=Literal)*)? ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//{TupleLiteral}
		public Action getTupleLiteralAction_1() { return cTupleLiteralAction_1; }

		//(elems+=Literal ("," elems+=Literal)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elems+=Literal
		public Assignment getElemsAssignment_2_0() { return cElemsAssignment_2_0; }

		//Literal
		public RuleCall getElemsLiteralParserRuleCall_2_0_0() { return cElemsLiteralParserRuleCall_2_0_0; }

		//("," elems+=Literal)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elems+=Literal
		public Assignment getElemsAssignment_2_1_1() { return cElemsAssignment_2_1_1; }

		//Literal
		public RuleCall getElemsLiteralParserRuleCall_2_1_1_0() { return cElemsLiteralParserRuleCall_2_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class ListLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeConsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeConsTypeDeclCrossReference_0_0 = (CrossReference)cTypeConsAssignment_0.eContents().get(0);
		private final RuleCall cTypeConsTypeDeclIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeConsTypeDeclCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElemsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElemsELiteralParserRuleCall_2_0_0 = (RuleCall)cElemsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElemsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElemsELiteralParserRuleCall_2_1_1_0 = (RuleCall)cElemsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListLiteral:
		//	typeCons=[TypeDecl] "[" (elems+=ELiteral ("," elems+=ELiteral)*)? "]";
		public ParserRule getRule() { return rule; }

		//typeCons=[TypeDecl] "[" (elems+=ELiteral ("," elems+=ELiteral)*)? "]"
		public Group getGroup() { return cGroup; }

		//typeCons=[TypeDecl]
		public Assignment getTypeConsAssignment_0() { return cTypeConsAssignment_0; }

		//[TypeDecl]
		public CrossReference getTypeConsTypeDeclCrossReference_0_0() { return cTypeConsTypeDeclCrossReference_0_0; }

		//ID
		public RuleCall getTypeConsTypeDeclIDTerminalRuleCall_0_0_1() { return cTypeConsTypeDeclIDTerminalRuleCall_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(elems+=ELiteral ("," elems+=ELiteral)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elems+=ELiteral
		public Assignment getElemsAssignment_2_0() { return cElemsAssignment_2_0; }

		//ELiteral
		public RuleCall getElemsELiteralParserRuleCall_2_0_0() { return cElemsELiteralParserRuleCall_2_0_0; }

		//("," elems+=ELiteral)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elems+=ELiteral
		public Assignment getElemsAssignment_2_1_1() { return cElemsAssignment_2_1_1; }

		//ELiteral
		public RuleCall getElemsELiteralParserRuleCall_2_1_1_0() { return cElemsELiteralParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class SetLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeConsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeConsTypeDeclCrossReference_0_0 = (CrossReference)cTypeConsAssignment_0.eContents().get(0);
		private final RuleCall cTypeConsTypeDeclIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeConsTypeDeclCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElemsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElemsELiteralParserRuleCall_2_0_0 = (RuleCall)cElemsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElemsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElemsELiteralParserRuleCall_2_1_1_0 = (RuleCall)cElemsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetLiteral:
		//	typeCons=[TypeDecl] "{" (elems+=ELiteral ("," elems+=ELiteral)*)? "}";
		public ParserRule getRule() { return rule; }

		//typeCons=[TypeDecl] "{" (elems+=ELiteral ("," elems+=ELiteral)*)? "}"
		public Group getGroup() { return cGroup; }

		//typeCons=[TypeDecl]
		public Assignment getTypeConsAssignment_0() { return cTypeConsAssignment_0; }

		//[TypeDecl]
		public CrossReference getTypeConsTypeDeclCrossReference_0_0() { return cTypeConsTypeDeclCrossReference_0_0; }

		//ID
		public RuleCall getTypeConsTypeDeclIDTerminalRuleCall_0_0_1() { return cTypeConsTypeDeclIDTerminalRuleCall_0_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(elems+=ELiteral ("," elems+=ELiteral)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elems+=ELiteral
		public Assignment getElemsAssignment_2_0() { return cElemsAssignment_2_0; }

		//ELiteral
		public RuleCall getElemsELiteralParserRuleCall_2_0_0() { return cElemsELiteralParserRuleCall_2_0_0; }

		//("," elems+=ELiteral)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elems+=ELiteral
		public Assignment getElemsAssignment_2_1_1() { return cElemsAssignment_2_1_1; }

		//ELiteral
		public RuleCall getElemsELiteralParserRuleCall_2_1_1_0() { return cElemsELiteralParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ELiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ELiteral");
		private final Assignment cLitAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLitLITTerminalRuleCall_0 = (RuleCall)cLitAssignment.eContents().get(0);
		
		//ELiteral:
		//	lit=LIT;
		public ParserRule getRule() { return rule; }

		//lit=LIT
		public Assignment getLitAssignment() { return cLitAssignment; }

		//LIT
		public RuleCall getLitLITTerminalRuleCall_0() { return cLitLITTerminalRuleCall_0; }
	}

	public class SubGroupDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubGroupDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cCategoryNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cCategoryNameIDTerminalRuleCall_0_0_0 = (RuleCall)cCategoryNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSubGroupTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//SubGroupDecl:
		//	(categoryName=ID ":")? name=ID type=SubGroupType;
		public ParserRule getRule() { return rule; }

		//(categoryName=ID ":")? name=ID type=SubGroupType
		public Group getGroup() { return cGroup; }

		//(categoryName=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//categoryName=ID
		public Assignment getCategoryNameAssignment_0_0() { return cCategoryNameAssignment_0_0; }

		//ID
		public RuleCall getCategoryNameIDTerminalRuleCall_0_0_0() { return cCategoryNameIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//type=SubGroupType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//SubGroupType
		public RuleCall getTypeSubGroupTypeParserRuleCall_2_0() { return cTypeSubGroupTypeParserRuleCall_2_0; }
	}

	public class SubGroupTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubGroupType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cSubGroupTypeRefAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cTypeFeatureGroupDeclCrossReference_0_2_0 = (CrossReference)cTypeAssignment_0_2.eContents().get(0);
		private final RuleCall cTypeFeatureGroupDeclIDTerminalRuleCall_0_2_0_1 = (RuleCall)cTypeFeatureGroupDeclCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSubGroupTypeAnonAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLessThanSignColonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cSupersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cSupersFeatureGroupDeclCrossReference_1_1_1_0 = (CrossReference)cSupersAssignment_1_1_1.eContents().get(0);
		private final RuleCall cSupersFeatureGroupDeclIDTerminalRuleCall_1_1_1_0_1 = (RuleCall)cSupersFeatureGroupDeclCrossReference_1_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cSupersAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final CrossReference cSupersFeatureGroupDeclCrossReference_1_1_2_1_0 = (CrossReference)cSupersAssignment_1_1_2_1.eContents().get(0);
		private final RuleCall cSupersFeatureGroupDeclIDTerminalRuleCall_1_1_2_1_0_1 = (RuleCall)cSupersFeatureGroupDeclCrossReference_1_1_2_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cBodyAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cBodyFeatureGroupBodyParserRuleCall_1_3_0 = (RuleCall)cBodyAssignment_1_3.eContents().get(0);
		
		//SubGroupType:
		//	":" {SubGroupTypeRef} type=[FeatureGroupDecl] | {SubGroupTypeAnon} ("<:" supers+=[FeatureGroupDecl] (","
		//	supers+=[FeatureGroupDecl])*)? "=" body=FeatureGroupBody;
		public ParserRule getRule() { return rule; }

		//":" {SubGroupTypeRef} type=[FeatureGroupDecl] | {SubGroupTypeAnon} ("<:" supers+=[FeatureGroupDecl] (","
		//supers+=[FeatureGroupDecl])*)? "=" body=FeatureGroupBody
		public Alternatives getAlternatives() { return cAlternatives; }

		//":" {SubGroupTypeRef} type=[FeatureGroupDecl]
		public Group getGroup_0() { return cGroup_0; }

		//":"
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }

		//{SubGroupTypeRef}
		public Action getSubGroupTypeRefAction_0_1() { return cSubGroupTypeRefAction_0_1; }

		//type=[FeatureGroupDecl]
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }

		//[FeatureGroupDecl]
		public CrossReference getTypeFeatureGroupDeclCrossReference_0_2_0() { return cTypeFeatureGroupDeclCrossReference_0_2_0; }

		//ID
		public RuleCall getTypeFeatureGroupDeclIDTerminalRuleCall_0_2_0_1() { return cTypeFeatureGroupDeclIDTerminalRuleCall_0_2_0_1; }

		//{SubGroupTypeAnon} ("<:" supers+=[FeatureGroupDecl] ("," supers+=[FeatureGroupDecl])*)? "=" body=FeatureGroupBody
		public Group getGroup_1() { return cGroup_1; }

		//{SubGroupTypeAnon}
		public Action getSubGroupTypeAnonAction_1_0() { return cSubGroupTypeAnonAction_1_0; }

		//("<:" supers+=[FeatureGroupDecl] ("," supers+=[FeatureGroupDecl])*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"<:"
		public Keyword getLessThanSignColonKeyword_1_1_0() { return cLessThanSignColonKeyword_1_1_0; }

		//supers+=[FeatureGroupDecl]
		public Assignment getSupersAssignment_1_1_1() { return cSupersAssignment_1_1_1; }

		//[FeatureGroupDecl]
		public CrossReference getSupersFeatureGroupDeclCrossReference_1_1_1_0() { return cSupersFeatureGroupDeclCrossReference_1_1_1_0; }

		//ID
		public RuleCall getSupersFeatureGroupDeclIDTerminalRuleCall_1_1_1_0_1() { return cSupersFeatureGroupDeclIDTerminalRuleCall_1_1_1_0_1; }

		//("," supers+=[FeatureGroupDecl])*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }

		//supers+=[FeatureGroupDecl]
		public Assignment getSupersAssignment_1_1_2_1() { return cSupersAssignment_1_1_2_1; }

		//[FeatureGroupDecl]
		public CrossReference getSupersFeatureGroupDeclCrossReference_1_1_2_1_0() { return cSupersFeatureGroupDeclCrossReference_1_1_2_1_0; }

		//ID
		public RuleCall getSupersFeatureGroupDeclIDTerminalRuleCall_1_1_2_1_0_1() { return cSupersFeatureGroupDeclIDTerminalRuleCall_1_1_2_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//body=FeatureGroupBody
		public Assignment getBodyAssignment_1_3() { return cBodyAssignment_1_3; }

		//FeatureGroupBody
		public RuleCall getBodyFeatureGroupBodyParserRuleCall_1_3_0() { return cBodyFeatureGroupBodyParserRuleCall_1_3_0; }
	}
	
	
	private ModelElements pModel;
	private DeclElements pDecl;
	private FeatureGroupBodyElements pFeatureGroupBody;
	private GroupElementDeclElements pGroupElementDecl;
	private GroupAttrDeclElements pGroupAttrDecl;
	private ModifierElements pModifier;
	private TypeElements pType;
	private LiteralElements pLiteral;
	private BasicLiteralElements pBasicLiteral;
	private TupleLiteralElements pTupleLiteral;
	private ListLiteralElements pListLiteral;
	private SetLiteralElements pSetLiteral;
	private ELiteralElements pELiteral;
	private SubGroupDeclElements pSubGroupDecl;
	private SubGroupTypeElements pSubGroupType;
	private TerminalRule tID;
	private TerminalRule tLIT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public DeviceModelingLanguageGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.ksu.cis.projects.mdcf.devicemodel.DeviceModelingLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	decls+=Decl*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Decl:
	//	"type" {TypeDecl} name=ID | "featuregroup" {FeatureGroupDecl} name=ID ("<:" supers+=[FeatureGroupDecl] (","
	//	supers+=[FeatureGroupDecl])*)? body=FeatureGroupBody;
	public DeclElements getDeclAccess() {
		return (pDecl != null) ? pDecl : (pDecl = new DeclElements());
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}

	//FeatureGroupBody:
	//	"{" {FeatureGroupBody} groupElements+=GroupElementDecl* "}";
	public FeatureGroupBodyElements getFeatureGroupBodyAccess() {
		return (pFeatureGroupBody != null) ? pFeatureGroupBody : (pFeatureGroupBody = new FeatureGroupBodyElements());
	}
	
	public ParserRule getFeatureGroupBodyRule() {
		return getFeatureGroupBodyAccess().getRule();
	}

	//GroupElementDecl:
	//	GroupAttrDecl | SubGroupDecl;
	public GroupElementDeclElements getGroupElementDeclAccess() {
		return (pGroupElementDecl != null) ? pGroupElementDecl : (pGroupElementDecl = new GroupElementDeclElements());
	}
	
	public ParserRule getGroupElementDeclRule() {
		return getGroupElementDeclAccess().getRule();
	}

	//GroupAttrDecl:
	//	modifier=Modifier attributeName=ID (":" attributeType=Type | "=" attributeLiteral=Literal);
	public GroupAttrDeclElements getGroupAttrDeclAccess() {
		return (pGroupAttrDecl != null) ? pGroupAttrDecl : (pGroupAttrDecl = new GroupAttrDeclElements());
	}
	
	public ParserRule getGroupAttrDeclRule() {
		return getGroupAttrDeclAccess().getRule();
	}

	//Modifier:
	//	"const" | "val" | "var" | "def";
	public ModifierElements getModifierAccess() {
		return (pModifier != null) ? pModifier : (pModifier = new ModifierElements());
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//Type:
	//	{BasicType} baseType=[TypeDecl] ({ListType.base=current} "[" "]" | {SetType.base=current} "{" "}")* | "<" {TupleType}
	//	elemTypes+=Type ("*" elemTypes+=Type)+ ">";
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Literal:
	//	BasicLiteral | TupleLiteral | ListLiteral | SetLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BasicLiteral:
	//	typeCons=[TypeDecl] lit=LIT;
	public BasicLiteralElements getBasicLiteralAccess() {
		return (pBasicLiteral != null) ? pBasicLiteral : (pBasicLiteral = new BasicLiteralElements());
	}
	
	public ParserRule getBasicLiteralRule() {
		return getBasicLiteralAccess().getRule();
	}

	//TupleLiteral:
	//	"<" {TupleLiteral} (elems+=Literal ("," elems+=Literal)*)? ">";
	public TupleLiteralElements getTupleLiteralAccess() {
		return (pTupleLiteral != null) ? pTupleLiteral : (pTupleLiteral = new TupleLiteralElements());
	}
	
	public ParserRule getTupleLiteralRule() {
		return getTupleLiteralAccess().getRule();
	}

	//ListLiteral:
	//	typeCons=[TypeDecl] "[" (elems+=ELiteral ("," elems+=ELiteral)*)? "]";
	public ListLiteralElements getListLiteralAccess() {
		return (pListLiteral != null) ? pListLiteral : (pListLiteral = new ListLiteralElements());
	}
	
	public ParserRule getListLiteralRule() {
		return getListLiteralAccess().getRule();
	}

	//SetLiteral:
	//	typeCons=[TypeDecl] "{" (elems+=ELiteral ("," elems+=ELiteral)*)? "}";
	public SetLiteralElements getSetLiteralAccess() {
		return (pSetLiteral != null) ? pSetLiteral : (pSetLiteral = new SetLiteralElements());
	}
	
	public ParserRule getSetLiteralRule() {
		return getSetLiteralAccess().getRule();
	}

	//ELiteral:
	//	lit=LIT;
	public ELiteralElements getELiteralAccess() {
		return (pELiteral != null) ? pELiteral : (pELiteral = new ELiteralElements());
	}
	
	public ParserRule getELiteralRule() {
		return getELiteralAccess().getRule();
	}

	//SubGroupDecl:
	//	(categoryName=ID ":")? name=ID type=SubGroupType;
	public SubGroupDeclElements getSubGroupDeclAccess() {
		return (pSubGroupDecl != null) ? pSubGroupDecl : (pSubGroupDecl = new SubGroupDeclElements());
	}
	
	public ParserRule getSubGroupDeclRule() {
		return getSubGroupDeclAccess().getRule();
	}

	//SubGroupType:
	//	":" {SubGroupTypeRef} type=[FeatureGroupDecl] | {SubGroupTypeAnon} ("<:" supers+=[FeatureGroupDecl] (","
	//	supers+=[FeatureGroupDecl])*)? "=" body=FeatureGroupBody;
	public SubGroupTypeElements getSubGroupTypeAccess() {
		return (pSubGroupType != null) ? pSubGroupType : (pSubGroupType = new SubGroupTypeElements());
	}
	
	public ParserRule getSubGroupTypeRule() {
		return getSubGroupTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal LIT:
	//	"("->")";
	public TerminalRule getLITRule() {
		return (tLIT != null) ? tLIT : (tLIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LIT"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
